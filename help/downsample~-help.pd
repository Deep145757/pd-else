#N canvas 379 70 560 489 10;
#X obj 187 178 noise~;
#X obj 319 154 hsl 128 15 1 44100 1 0 empty empty empty -2 -8 0 10
-228856 -1 -1 0 1;
#X obj 187 253 else/out~;
#X obj 2 3 cnv 15 301 42 empty empty downsample~ 20 20 2 37 -233017
-1 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 23 40 cnv 4 4 4 empty empty Downsample 0 28 2 18 -233017 -1
0;
#X obj 125 40 cnv 4 4 4 empty empty a 0 28 2 18 -233017 -1 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 140 40 cnv 4 4 4 empty empty signal 0 28 2 18 -233017 -1 0;
#X obj 3 449 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 3 320 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 3 376 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 3 413 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 85 352 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 153 329 signal;
#X obj 86 385 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 85 329 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 117 354 float/signal;
#X text 209 328 - signal to be downsampled;
#X text 202 386 - downsampled signal;
#X text 153 385 signal;
#X text 141 425 1) float;
#X text 208 355 - rate (in hertz) used to downsample the input signal
;
#X text 208 425 - rate in hertz (default 0);
#X obj 316 183 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 187 211 else/downsample~ 44100;
#N canvas 389 314 876 380 example 0;
#X obj 156 203 else/sh~;
#X obj 201 170 else/impulse~;
#X obj 135 137 noise~;
#X obj 204 108 hsl 128 15 1 44100 1 0 empty empty empty -2 -8 0 10
-228856 -1 -1 0 1;
#X obj 156 264 else/out~;
#X obj 201 137 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 1 256;
#X text 42 37 This is a way to implement downsample with other two
objects from the else library.;
#X obj 557 136 noise~;
#X obj 626 107 hsl 128 15 1 44100 1 0 empty empty empty -2 -8 0 10
-228856 -1 -1 0 1;
#X obj 572 263 else/out~;
#X obj 623 136 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 1 256;
#X obj 623 169 phasor~;
#X obj 572 202 samphold~;
#X text 458 36 One issue present with the vanilla way of doing this
is that you can't go up to the sample rate - it stops sampling then.
;
#X connect 0 0 4 0;
#X connect 0 0 4 1;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 3 0 5 0;
#X connect 5 0 1 0;
#X connect 7 0 12 0;
#X connect 8 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 1;
#X connect 12 0 9 0;
#X connect 12 0 9 1;
#X restore 457 288 pd example;
#X text 84 95 [downsample~] samples and holds a signal received in
the left inlet at a frequency rate in hertz. No interpolation of the
output is performed (yet \, as there are plans for adding this option).
;
#X text 400 184 frequency in Hz;
#X connect 0 0 30 0;
#X connect 1 0 29 0;
#X connect 29 0 30 1;
#X connect 30 0 2 0;
#X connect 30 0 2 1;
