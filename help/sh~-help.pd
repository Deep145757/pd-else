#N canvas 539 50 559 487 10;
#X obj 3 317 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 3 379 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 3 416 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 152 388 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 153 325 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 3 447 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 152 187 noise~;
#X obj 3 3 cnv 15 301 42 empty empty sh~ 20 20 2 37 -233017 -1 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 23 40 cnv 4 4 4 empty empty Sample 0 28 2 18 -233017 -1 0;
#X obj 107 40 cnv 4 4 4 empty empty hold 0 28 2 18 -233017 -1 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 83 40 cnv 4 4 4 empty empty & 0 28 2 18 -233017 -1 0;
#X obj 153 351 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 152 283 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#N canvas 207 34 366 264 (subpatch) 0;
#X obj 51 101 tgl 42 0 \$0-tgl-s \$0-tgl-r empty 1 8 1 9 -228856 -128992
-262144 0 1;
#X obj 215 68 route dsp;
#X obj 215 37 receive pd;
#N canvas 977 77 379 291 set_color 0;
#X obj 47 30 inlet;
#X obj 147 200 s \$0-cnv;
#X obj 47 83 select 0 1;
#X obj 47 220 s \$0-tgl-r;
#N canvas 0 22 712 637 off 0;
#X obj 490 220 * -1;
#X obj 424 300 +;
#X obj 409 325 +;
#X obj 347 219 * -65536;
#X obj 424 220 * -256;
#X obj 409 356 - 1;
#X obj 390 189 unpack f f f;
#X obj 225 295 +;
#X obj 210 320 +;
#X obj 148 214 * -65536;
#X obj 225 215 * -256;
#X obj 291 215 * -1;
#X obj 210 351 - 1;
#X obj 191 184 unpack f f f;
#X obj 379 423 pack;
#X msg 395 152 124 124 124;
#X msg 203 154 220 220 220;
#X obj 238 121 t b b;
#X obj 238 81 inlet;
#X obj 378 485 outlet;
#X connect 0 0 1 1;
#X connect 1 0 2 1;
#X connect 2 0 5 0;
#X connect 3 0 2 0;
#X connect 4 0 1 0;
#X connect 5 0 14 1;
#X connect 6 0 3 0;
#X connect 6 1 4 0;
#X connect 6 2 0 0;
#X connect 7 0 8 1;
#X connect 8 0 12 0;
#X connect 9 0 8 0;
#X connect 10 0 7 0;
#X connect 11 0 7 1;
#X connect 12 0 14 0;
#X connect 13 0 9 0;
#X connect 13 1 10 0;
#X connect 13 2 11 0;
#X connect 14 0 19 0;
#X connect 15 0 6 0;
#X connect 16 0 13 0;
#X connect 17 0 16 0;
#X connect 17 1 15 0;
#X connect 18 0 17 0;
#X restore 47 113 pd off;
#X msg 47 180 color \$1 \$2 0;
#X msg 147 131 -4.86997e+06 -1.34937e+07;
#X msg 147 171 color \$1 0 \$2;
#X connect 0 0 2 0;
#X connect 2 0 4 0;
#X connect 2 1 6 0;
#X connect 4 0 5 0;
#X connect 4 0 7 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X restore 215 165 pd set_color;
#X obj 135 122 r \$0-tgl-s;
#N canvas 121 482 450 300 (subpatch) 0;
#X obj 101 101 cnv 25 40 25 empty \$0-cnv DSP 3 13 0 20 -228856 -128992
0;
#X coords 0 -1 1 1 42 27 1 100 100;
#X restore 51 144 pd;
#X obj 226 139 s \$0-tgl-r;
#X msg 226 115 set \$1;
#X msg 135 177 \; pd dsp \$1;
#N canvas 256 32 278 194 load_check 0;
#X obj 136 53 sig~ 1;
#X obj 74 24 loadbang;
#X obj 136 86 snapshot~;
#X obj 91 52 del 5;
#X obj 136 151 outlet;
#X obj 74 103 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 74 126 switch~;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 1 0 5 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 3 0 5 0;
#X connect 5 0 6 0;
#X restore 51 72 pd load_check;
#X connect 1 0 3 0;
#X connect 1 0 7 0;
#X connect 2 0 1 0;
#X connect 4 0 8 0;
#X connect 4 0 3 0;
#X connect 7 0 6 0;
#X connect 9 0 0 0;
#X coords 0 -1 1 1 44 72 2 50 100;
#X restore 504 62 pd;
#X text 81 98 The [sh~] object samples and holds a value into the left
inlet according to the second "gate" inlet. The values are sampled
if the gate signal is greater than zero \, or held if lesser or equal
to zero.;
#X obj 267 237 else/out~;
#X text 180 327 signal - input signal;
#X text 180 353 signal - gate signal;
#X obj 267 183 else/imp~ 2;
#N canvas 870 127 425 463 gate 0;
#X obj 138 163 noise~;
#X obj 138 349 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 207 165 osc~ 0.5;
#X obj 155 242 else/out~;
#X text 32 18 In the parent patch we have an example with an impulse
generator \, where the input value is only sampled at the instant the
impulse occurs \, then held otherwise.;
#X text 32 69 In this example we have an oscillator as the gate signal.
Now \, when values are greater than zero \, the gate is open and the
signal passes through \, being held only when the gate value is less
or equal to zero.;
#X obj 138 203 else/sh~;
#X text 99 398 This object is inspired by "Gate" from SuperCollider!
, f 33;
#X obj 138 319 else/sig2float~ 100;
#X connect 0 0 6 0;
#X connect 2 0 6 1;
#X connect 6 0 3 0;
#X connect 6 0 3 1;
#X connect 6 0 8 0;
#X connect 8 0 1 0;
#X restore 494 222 pd gate;
#N canvas 391 119 819 356 downsampling 0;
#X obj 121 129 noise~;
#X obj 195 136 else/imp~ 100;
#X obj 103 215 else/out~;
#X obj 198 87 hsl 128 15 100 44100 1 0 empty empty empty -2 -8 0 10
-228856 -1 -1 0 1;
#X obj 195 114 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 31 18 With [sh~] you can downsample a signal (in a "sample
and hold" fashion) and raise it up to the sample rate.;
#X obj 517 128 noise~;
#X obj 499 214 else/out~;
#X obj 594 86 hsl 128 15 100 44100 1 0 empty empty empty -2 -8 0 10
-228856 -1 -1 0 1;
#X obj 591 113 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 517 168 samphold~;
#X obj 591 135 phasor~ 100;
#X text 415 21 This isn't possible with the corresponding vanilla counterparts
because of the way they were designed. Change the slider up to the
sample rate and check it out.;
#X text 194 311 The sample rate must be 44100 in order for this example
to work;
#X obj 121 169 else/sh~;
#X connect 0 0 14 0;
#X connect 1 0 14 1;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 6 0 10 0;
#X connect 8 0 9 0;
#X connect 9 0 11 0;
#X connect 10 0 7 0;
#X connect 10 0 7 1;
#X connect 11 0 10 1;
#X connect 14 0 2 0;
#X connect 14 0 2 1;
#X restore 445 250 pd downsampling;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X text 180 388 signal - sampled and held signal;
#X obj 152 217 else/sh~;
#X text 168 424 1) float - initially held value;
#N canvas 837 142 450 319 argument 0;
#X obj 180 117 noise~;
#X obj 180 241 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 180 205 else/sig2float~;
#X obj 180 158 else/sh~ 1.55;
#X obj 255 112 else/trigate~;
#X obj 255 83 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 31 18 [sh~] accepts a float argument for the initially held
value \, so it outputs it when loading the object and before it is
triggered.;
#X connect 0 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X connect 4 0 3 1;
#X connect 5 0 4 0;
#X restore 469 276 pd argument;
#X obj 152 253 else/sig2float~;
#X connect 6 0 31 0;
#X connect 25 0 22 0;
#X connect 25 0 22 1;
#X connect 25 0 31 1;
#X connect 31 0 34 0;
#X connect 34 0 19 0;
