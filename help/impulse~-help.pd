#N canvas 591 30 561 487 10;
#X obj 3 286 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 3 362 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 3 398 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 104 371 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 3 449 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#N canvas 207 34 366 264 (subpatch) 0;
#X obj 51 101 tgl 42 0 \$0-tgl-s \$0-tgl-r empty 1 8 1 9 -74965 -212593
-262144 1 1;
#X obj 215 68 route dsp;
#X obj 215 37 receive pd;
#N canvas 977 77 379 291 set_color 0;
#X obj 47 30 inlet;
#X obj 147 200 s \$0-cnv;
#X obj 47 83 select 0 1;
#X obj 47 220 s \$0-tgl-r;
#N canvas 0 22 712 637 off 0;
#X obj 490 220 * -1;
#X obj 424 300 +;
#X obj 409 325 +;
#X obj 347 219 * -65536;
#X obj 424 220 * -256;
#X obj 409 356 - 1;
#X obj 390 189 unpack f f f;
#X obj 225 295 +;
#X obj 210 320 +;
#X obj 148 214 * -65536;
#X obj 225 215 * -256;
#X obj 291 215 * -1;
#X obj 210 351 - 1;
#X obj 191 184 unpack f f f;
#X obj 379 423 pack;
#X msg 395 152 124 124 124;
#X msg 203 154 220 220 220;
#X obj 238 121 t b b;
#X obj 238 81 inlet;
#X obj 378 485 outlet;
#X connect 0 0 1 1;
#X connect 1 0 2 1;
#X connect 2 0 5 0;
#X connect 3 0 2 0;
#X connect 4 0 1 0;
#X connect 5 0 14 1;
#X connect 6 0 3 0;
#X connect 6 1 4 0;
#X connect 6 2 0 0;
#X connect 7 0 8 1;
#X connect 8 0 12 0;
#X connect 9 0 8 0;
#X connect 10 0 7 0;
#X connect 11 0 7 1;
#X connect 12 0 14 0;
#X connect 13 0 9 0;
#X connect 13 1 10 0;
#X connect 13 2 11 0;
#X connect 14 0 19 0;
#X connect 15 0 6 0;
#X connect 16 0 13 0;
#X connect 17 0 16 0;
#X connect 17 1 15 0;
#X connect 18 0 17 0;
#X restore 47 113 pd off;
#X msg 47 180 color \$1 \$2 0;
#X msg 147 131 -4.86997e+06 -1.34937e+07;
#X msg 147 171 color \$1 0 \$2;
#X connect 0 0 2 0;
#X connect 2 0 4 0;
#X connect 2 1 6 0;
#X connect 4 0 5 0;
#X connect 4 0 7 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 6 0 5 0;
#X connect 7 0 1 0;
#X restore 215 165 pd set_color;
#X obj 135 122 r \$0-tgl-s;
#N canvas 121 482 450 300 (subpatch) 0;
#X obj 101 101 cnv 25 40 25 empty \$0-cnv DSP 3 13 0 20 -74965 -212593
0;
#X coords 0 -1 1 1 42 27 1 100 100;
#X restore 51 144 pd;
#X obj 226 139 s \$0-tgl-r;
#X msg 226 115 set \$1;
#X msg 135 177 \; pd dsp \$1;
#N canvas 256 32 278 194 load_check 0;
#X obj 136 53 sig~ 1;
#X obj 74 24 loadbang;
#X obj 136 86 snapshot~;
#X obj 91 52 del 5;
#X obj 136 151 outlet;
#X obj 74 103 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 74 126 switch~;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 1 0 5 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 3 0 5 0;
#X connect 5 0 6 0;
#X restore 51 72 pd load_check;
#X connect 1 0 3 0;
#X connect 1 0 7 0;
#X connect 2 0 1 0;
#X connect 4 0 8 0;
#X connect 4 0 3 0;
#X connect 7 0 6 0;
#X connect 9 0 0 0;
#X coords 0 -1 1 1 44 72 2 50 100;
#X restore 505 71 pd;
#X text 190 371 signal -;
#X obj 124 150 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 131 256;
#X obj 124 215 else/out~;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 23 40 cnv 4 4 4 empty empty Impulse 0 28 2 18 -233017 -1 0;
#X obj 90 40 cnv 4 4 4 empty empty oscillator 0 28 2 18 -233017 -1
0;
#X obj 3 4 cnv 15 301 42 empty empty impulse~ 20 20 2 37 -233017 -1
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X text 183 148 <= hz;
#N canvas 793 162 508 414 example 0;
#X obj 95 133 else/sh~;
#X obj 95 88 noise~;
#X obj 95 216 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0.453325 256;
#N canvas 1046 306 123 217 snapshot~ 0;
#X obj 29 107 snapshot~;
#X obj 46 79 metro 100;
#X obj 46 53 loadbang;
#X obj 29 146 outlet;
#X obj 29 25 inlet~;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 4 0 0 0;
#X restore 95 186 pd snapshot~;
#X obj 213 113 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 216 88 hsl 128 15 -1 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X text 241 87 frequency;
#X obj 213 178 else/out~;
#X text 31 267 Since it deals with negative frequencies \, the impulse
is only sent when leaping from one phase cycle to the next (in either
direction). How this happens is probably better understood if you check
the [pimp~] object and its help file - [pimp~] is a variant of [imp~]
which also carries an extra outlet for phase output.;
#X obj 213 140 else/impulse~ 1;
#X text 41 26 [imp~]/[impulse~] may be used as an oscillador but also
to periodically trigger processes such as with [sh~] below.;
#X text 255 366 see also:, f 9;
#X obj 335 365 else/pimp~;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 9 0;
#X connect 5 0 4 0;
#X connect 9 0 0 1;
#X connect 9 0 7 0;
#X connect 9 0 7 1;
#X restore 476 198 pd example;
#X text 251 371 impulse signal;
#X text 63 89 The [impulse~] object (or [imp~] for short) is an impulse
oscillator that accepts negative frequencies \, has inlets for phase
modulation and phase sync., f 57;
#X obj 285 212 else/out~;
#X obj 105 296 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 147 297 float/signal -;
#X text 251 297 frequency in hz;
#X obj 104 318 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 147 339 float/signal -;
#X obj 104 338 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X text 252 339 phase offset (modulation input);
#X text 252 319 phase sync (ressets internal phase);
#X text 147 319 float/signal -;
#X text 173 408 1) float;
#X text 239 427 - initial phase offset (default 0);
#X text 239 408 - frequency in hertz (default 0);
#X text 173 427 2) float;
#N canvas 403 51 858 494 sync 0;
#X msg 29 134 0;
#X msg 63 134 0.25;
#X msg 140 133 0.75;
#X msg 183 133 1;
#X msg 105 133 0.5;
#X obj 306 152 else/trigate~;
#X obj 306 132 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 217 132 <= reset =>;
#X text 313 173 <= impulse value of 1;
#X text 34 15 The second inlet resets the phase ands behaves in the
same way for control data as objects like [osc~] and [phasor~] in Pd.
A number input resets the oscillator and restarts the cycle with an
initial phase that corresponds to the input number \, so the internal
phase is synced to the given value. The phase values are from 0 to
1 and values beyond that are wrapped within this range.;
#X text 518 25 Syncing the phase with control messages is useful for
LFOs and control with MIDI. A sync with audio is usefull for the "hard
sync" technique \, where an oscillator is synced according to the frequency
of a master frequency., f 44;
#X obj 524 252 else/out~;
#X obj 593 149 nbx 5 14 110 200 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 200 256;
#X text 694 175 Master oscillator;
#X text 660 210 Slave oscillator;
#X obj 593 175 else/imp~ 110;
#X text 509 349 NOTE:;
#X text 525 382 The "phase sync" inlet is quite different from the
"phase offset" inlet. This means that the are completely independent.
, f 43;
#X text 36 317 Additionally \, you can reset the oscillator with an
impulse signal. Inputs that are > 0 and <= 1 reset the phase Pdexpects
an impulse signal for syncing. The impulse values need to be > 0 and
<= 1 (otherwise ignored). Because phase is cyclical \, the value of
1 represents the "phase 0" of the cycle \, where the impulse occurs.
Send it impulses above and check the result. Use a multiplier to reset
to another phase value.;
#X obj 54 211 else/out~;
#X obj 54 181 else/impulse~ 1;
#X obj 255 228 else/out~;
#X obj 255 198 else/impulse~ 1;
#X obj 549 209 else/imp~ 200;
#X connect 0 0 20 1;
#X connect 1 0 20 1;
#X connect 2 0 20 1;
#X connect 3 0 20 1;
#X connect 4 0 20 1;
#X connect 5 0 22 1;
#X connect 6 0 5 0;
#X connect 12 0 15 0;
#X connect 15 0 23 1;
#X connect 20 0 19 0;
#X connect 20 0 19 1;
#X connect 22 0 21 0;
#X connect 22 0 21 1;
#X connect 23 0 11 0;
#X connect 23 0 11 1;
#X restore 497 222 pd sync;
#N canvas 430 175 908 347 phase 0;
#X obj 575 122 cnv 15 240 65 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 591 214 else/out~;
#X text 572 104 Phase Modulation:;
#X obj 722 133 osc~ 50.01;
#X text 28 31 The second argument sets an initial phase (or "phase
offset"). This is also settable with the third inlet. This allows you
to control two oscillators with the same frequency falling in and out
of phase. Another feature is phase modulation., f 53;
#X obj 89 251 else/out~;
#X obj 107 215 +~;
#X text 376 114 1;
#X obj 244 114 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X floatatom 241 138 4 0 0 0 - - -, f 4;
#X text 224 114 0;
#X obj 241 162 else/float2sig~ 10;
#X text 464 43 The phase values are wrapped into the 0-1 range \, since
the phase cycle is from 0 to 1 (where 1 is also the start of another
cycle).;
#X obj 125 188 else/impulse~ 220;
#X obj 107 150 else/imp~ 220 0.5;
#X obj 606 161 else/impulse~ 200;
#X connect 3 0 15 2;
#X connect 6 0 5 0;
#X connect 6 0 5 1;
#X connect 8 0 9 0;
#X connect 9 0 11 0;
#X connect 11 0 13 2;
#X connect 13 0 6 1;
#X connect 14 0 6 0;
#X connect 15 0 1 0;
#X connect 15 0 1 1;
#X restore 441 246 pd phase offset;
#X obj 124 178 else/impulse~ 100;
#X obj 285 171 else/imp~ 5;
#X connect 7 0 41 0;
#X connect 41 0 8 0;
#X connect 41 0 8 1;
#X connect 42 0 25 0;
#X connect 42 0 25 1;
