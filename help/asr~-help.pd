#N canvas 421 73 562 583 10;
#X obj 5 374 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 5 452 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 5 510 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 5 557 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 130 461 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 130 382 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 206 461 signal;
#X obj 24 40 cnv 4 4 4 empty empty Attack/Sustain/Release 0 28 2 18
-233017 -1 0;
#X obj 199 40 cnv 4 4 4 empty empty gated 0 28 2 18 -233017 -1 0;
#X obj 130 405 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 164 405 float/signal;
#X obj 148 306 else/out~;
#X obj 191 262 *~;
#X obj 268 259 vsl 18 100 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 -228856
-1 -1 0 1;
#X obj 268 231 else/sig2float~;
#X text 291 349 0;
#X text 291 255 1;
#X obj 3 3 cnv 15 301 42 empty empty asr~ 20 20 2 37 -233017 -1 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 3 graph;
#X text 165 382 float/signal;
#X text 260 404 - attack time in ms;
#X obj 130 426 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X text 164 426 float/signal;
#X text 260 425 - release time in ms;
#X text 260 461 - envelope signal;
#X text 156 516 1) float - attack time in ms (default 0);
#X text 156 536 2) float - release time in ms (default 0);
#X obj 206 170 tgl 20 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 249 40 cnv 4 4 4 empty empty envelope 0 28 2 18 -233017 -1 0
;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 120 218 osc~ 440;
#X text 261 382 - gate values;
#X obj 273 173 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 341 173 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 274 155 attack;
#X text 343 155 release;
#N canvas 506 218 842 467 example 0;
#X obj 644 160 else/display~ 7;
#X obj 498 163 else/display~ 7;
#X text 704 163 <= gate value;
#X obj 498 209 else/sawtooth~;
#X obj 592 282 *~;
#X obj 549 364 else/out~;
#X obj 644 289 else/display~ 7;
#X obj 592 322 else/lowpass~ 0 20;
#X obj 644 261 else/rescale~ 100 1500;
#X text 706 292 <= cutoff;
#X text 560 167 <= Hz;
#X obj 644 203 else/asr~ 250 750;
#X obj 644 91 else/randpulse~ 0.5;
#X obj 498 137 else/randf~ 50 150;
#X text 445 30 [asr~] accepts any gate value \, positive or negative
and above 1 or below -1 \, so you can use it to control anything besides
amplitude.;
#X obj 169 90 else/tempo 120 100 -on;
#X obj 213 313 catch~ \$0-voice;
#X obj 101 382 clone;
#X text 79 337 see also:;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 265 158 tgl 40 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 265 210 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 178 103 / 127;
#X obj 73 77 unpack float float;
#X obj 92 144 osc~ 0.125;
#X obj 163 251 throw~ \$0-voice;
#X obj 73 173 else/vsaw~;
#X obj 178 131 else/asr~ 50 50;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 10 0;
#X connect 6 0 4 0;
#X connect 6 1 5 0;
#X connect 7 0 9 1;
#X connect 9 0 3 0;
#X connect 10 0 3 1;
#X connect 10 1 1 0;
#X restore 195 280 pd voice1;
#X obj 195 246 display;
#X obj 268 246 display;
#X obj 330 159 tgl 22 0 empty empty empty 0 -6 0 8 -216373 -66577 -1
1 1;
#X obj 169 135 else/display;
#X text 328 142 On/Off;
#X obj 169 165 makenote 127 150;
#X obj 213 392 else/out~;
#X obj 65 359 else/voices;
#X obj 213 342 else/plateverb~ 50 0.75 0.5 0.5 0.5, f 18;
#X text 143 280 open =>;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 265 158 tgl 40 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 265 210 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 178 103 / 127;
#X obj 73 77 unpack float float;
#X obj 92 144 osc~ 0.125;
#X obj 163 251 throw~ \$0-voice;
#X obj 73 173 else/vsaw~;
#X obj 178 131 else/asr~ 50 50;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 10 0;
#X connect 6 0 4 0;
#X connect 6 1 5 0;
#X connect 7 0 9 1;
#X connect 9 0 3 0;
#X connect 10 0 3 1;
#X connect 10 1 1 0;
#X restore 268 280 pd voice1;
#X obj 195 218 else/voices 2 1;
#X obj 169 113 else/randi 48 70;
#X obj 195 192 else/suspedal -retrig 1;
#X text 17 10 Here we have randomly generated notes into a sustain
pedal and then feeding a [voice] object with 2 voices. Also see that
each voice subpatch has [asr~]'s status outlet to control a DSP switch
for that subpatch - open and check it. You should also try pd's [clone]
object for managing polyphonic synths.;
#X connect 0 0 11 0;
#X connect 1 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 6 0 7 1;
#X connect 7 0 5 1;
#X connect 7 0 5 0;
#X connect 8 0 6 0;
#X connect 11 0 4 1;
#X connect 11 0 8 0;
#X connect 12 0 0 0;
#X connect 12 0 13 0;
#X connect 13 0 1 0;
#X connect 15 0 32 0;
#X connect 16 0 28 0;
#X connect 20 0 19 0;
#X connect 21 0 30 0;
#X connect 22 0 33 2;
#X connect 23 0 25 0;
#X connect 25 0 33 0;
#X connect 25 1 33 1;
#X connect 28 0 26 0;
#X connect 28 1 26 1;
#X connect 31 0 20 0;
#X connect 31 1 21 0;
#X connect 32 0 23 0;
#X connect 33 0 31 0;
#X connect 33 1 31 1;
#X restore 470 294 pd example;
#X obj 206 201 else/asr~ 1000 500, f 23;
#X text 396 338 see also:;
#X obj 468 337 else/adsr~;
#X text 68 86 [asr~] is a linear attack/sustain/release gated envelope.
At a gate on value (transition from 0 to any value) \, [asr~] goes
from 0 to that value at the specified attack time in ms. A gate off
(transition from any value to 0) makes [asr~] go to 0 at the specified
release time in ms., f 69;
#X text 166 171 gate;
#N canvas 610 131 414 421 triggered 0;
#X obj 195 204 else/display~ 7;
#X obj 139 331 else/out~;
#X obj 195 79 tgl 20 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 155 285 *~;
#X obj 83 211 else/brown~;
#X text 255 207 <= gate value;
#X obj 195 244 else/asr~ 50 500;
#X text 208 141 <= impulse;
#X obj 195 108 else/tempo~ 60;
#X obj 195 175 else/timed.gate~ 500;
#X text 16 20 You can use the [timed.gate~] object to create a timed
gate so you can trigger the envelope.;
#X connect 0 0 6 0;
#X connect 2 0 8 0;
#X connect 3 0 1 0;
#X connect 3 0 1 1;
#X connect 4 0 3 0;
#X connect 6 0 3 1;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X restore 451 257 pd triggered \; by impulses;
#X obj 131 484 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 212 484 float;
#X text 259 484 - envelope status (on: 1 / off: 0);
#N canvas 549 257 434 440 status 0;
#X obj 280 329 switch~;
#X obj 280 261 tgl 50 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 100 299 *~;
#X obj 38 237 osc~ 440;
#X obj 79 349 dac~;
#X obj 147 277 else/sig2float~;
#X obj 147 313 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 -228856
-1 -1 0 1;
#X text 21 95 This only works for control data such as MIDI \, and
is possible because the float input of [adsr~] will always turn the
status on \, so you can use it to start the DSP. See below., f 62
;
#X obj 341 151 else/setdsp~;
#X msg 134 203 0;
#X text 157 178 gate on;
#X text 168 202 gate off;
#X text 19 15 [asr~] has a right outlet that sends a status value (1
when the envelope starts and 0 when it ends). This can be useful for
different things \, but particularly to turn on and off the DSP processing
of a subpatch or abstraction with [switch~].;
#X obj 115 235 else/asr~ 100 500, f 28;
#X msg 115 178 0.125;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 2 0 4 1;
#X connect 3 0 2 0;
#X connect 5 0 6 0;
#X connect 9 0 13 0;
#X connect 13 0 2 1;
#X connect 13 0 5 0;
#X connect 13 1 1 0;
#X connect 14 0 13 0;
#X restore 476 230 pd status;
#X connect 12 0 11 0;
#X connect 12 0 11 1;
#X connect 14 0 13 0;
#X connect 27 0 44 0;
#X connect 37 0 12 0;
#X connect 39 0 44 1;
#X connect 40 0 44 2;
#X connect 44 0 12 1;
#X connect 44 0 14 0;
