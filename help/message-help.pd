#N canvas 472 44 561 473 10;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 23 41 cnv 4 4 4 empty empty Message 0 28 2 18 -233017 -1 0;
#X obj 98 41 cnv 4 4 4 empty empty box 0 28 2 18 -233017 -1 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 3 4 cnv 15 301 42 empty empty message 20 20 2 37 -233017 -1
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X obj 4 289 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 4 336 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 4 369 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 118 346 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 119 298 cnv 17 3 33 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 4 445 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X text 202 346 anything;
#X obj 4 417 cnv 3 550 3 empty empty click 8 12 0 13 -228856 -1 0;
#X text 266 299 - outputs message;
#X text 170 315 set <anything<>;
#X text 256 346 - the message;
#X text 212 299 anything;
#X text 161 425 clicking on the outputs the message;
#X obj 238 231 else/message \$0-x;
#X text 266 315 - sets a message;
#X obj 238 258 else/display;
#X text 185 231 click =>;
#X obj 212 192 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#N canvas 427 230 833 309 syntax 0;
#X text 14 20 Like a regular message box \, a comma will split the
message in different ones inside the same box.;
#X obj 106 72 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 106 102 else/message 1 \, 2 \, 3;
#X obj 106 132 print Message;
#X obj 94 228 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 17 176 It can also deal with semicolons \, which turn the message
box into a send object;
#X obj 94 258 else/message \; \$0-a 1 \, 2 \, 3;
#X obj 223 234 receive \$0-a;
#X obj 223 262 print Receive;
#X obj 483 234 else/display;
#X obj 660 234 else/display;
#X msg 446 139 1 2;
#X msg 513 149 list a b c;
#X msg 532 175 1 2 3;
#X obj 483 206 message list $a1 $a2 $a3;
#X obj 660 206 message $a1 $a2;
#X msg 692 177 12 13;
#X msg 620 120 stop;
#X msg 660 121 symbol x;
#X obj 483 138 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 678 150 list a b;
#X text 389 42 Since "\$1" \, "\$2" and so on are taken and considered
the arguments of an abstraction \, the [message] box has a specific
syntax for message input (similar in fashion to [expr]'s variables).
The variables are $a# - where "a" is short for "atom" and # is the
element number of an incomming message., f 68;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 6 0;
#X connect 7 0 8 0;
#X connect 11 0 14 0;
#X connect 12 0 14 0;
#X connect 13 0 14 0;
#X connect 14 0 9 0;
#X connect 15 0 10 0;
#X connect 16 0 15 0;
#X connect 17 0 15 0;
#X connect 18 0 15 0;
#X connect 19 0 14 0;
#X connect 20 0 15 0;
#X restore 465 263 pd syntax;
#X text 71 87 The [message] object is much like Pd Vanilla's message
box \, but as an object it deals differently with dollarsigns. For
instance \, "\$1" \, "\$2" \, and so on are considered arguments \,
and [message] can also deal with "\$0" and expand it. For the normal
behaviour for dollarsigns in messages \, [message] has its own variables:
$a1 \, $a2 \, and so on., f 71;
#X text 71 148 This object also mimicks the behaviour of comma and
semicolons inside regular message boxes. See [pd syntax] for more details.
, f 71;
#X text 102 376 1) anything -;
#X msg 238 192 set a b c;
#X text 187 376 the message \, where commas and semicolons behave as
usual in message boxes \, dollarsigns behave as usual inside objects
and $a# is a syntax for dollarsign behaviour in messages;
#X connect 25 0 27 0;
#X connect 29 0 25 0;
#X connect 34 0 25 0;
