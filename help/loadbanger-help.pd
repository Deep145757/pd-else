#N canvas 601 239 564 457 10;
#X obj 6 290 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 6 326 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 6 361 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 102 335 cnv 17 3 17 empty empty n 5 9 0 16 -228856 -162280 0
;
#X obj 6 426 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 308 6 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 307 5 pd;
#X obj 347 13 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 25 42 cnv 4 4 4 empty empty Multiple 0 28 2 18 -233017 -1 0
;
#X obj 460 13 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 480 13 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 517 13 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 466 28 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 504 28 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 98 42 cnv 4 4 4 empty empty loadbangs 0 28 2 18 -233017 -1 0
;
#X obj 127 193 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 5 5 cnv 15 301 42 empty empty loadbanger 20 20 2 37 -233017
-1 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 4 5 graph;
#X obj 102 299 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 104 257 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 160 193 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 161 335 bang;
#X text 196 335 - bang messages at loading or when activated;
#X text 132 299 anything;
#X obj 243 255 print lb-1;
#X obj 127 257 print lb-2;
#X obj 220 256 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 132 371 1) float - number of outputs (default 1);
#X obj 6 396 cnv 3 550 3 empty empty flags 8 12 0 13 -228856 -1 0;
#X text 157 405 -next: sets loadbang to "next mode";
#N canvas 886 173 538 395 dynamic 0;
#X obj 348 298 else/sampler~ 4;
#X obj 118 298 else/sampler~;
#X text 59 53 So \, by default \, [loadbanger] uses the "init" type
of bang when loading the patch. As said before \, this is sent first
in subpatches and abstractions. Not only that \, but the bang is sent
also before the parent patch continues to load and connections are
made.;
#X text 61 130 This makes it possible to create abstractions with variable
inlets/outlets via dynamic patching \, which simply does not work if
you're using [loadbang] instead.;
#X obj 228 298 else/sampler~ 2;
#X text 64 183 In ELSE \, the [sampler~] abstraction uses [loadbanger]
for that purpose \, so it can have a variable number of outlets depending
on the first optional float argument (1 by default).;
#X restore 411 257 pd dynamic patching;
#N canvas 551 213 549 404 details 0;
#X obj 295 303 else/loadbanger 3;
#X obj 411 326 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 353 329 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 295 329 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 234 345 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 158 344 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 83 344 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 83 318 trigger bang bang bang;
#X obj 83 288 loadbang;
#X text 53 28 Pure Data can send two different kind of bangs when loading
the patch. Most users know about the [loadbang] object in Pd Vanilla
\, which sends a bang when the patch has been loaded. Let's name this
type of bang as "load". The "load" bang is also sent if you reinstantiate
the [loadbang] object (that is \, edit and recreate the objetc) or
duplicate it.;
#X text 54 120 But there is also another type of bang that Pd can send
\, lets call it "init" bang. This second type is sent before "load".
Though this kind of bang doesn't trigger a bang when reinstantiating
or duplicating the object. A famous external that just uses this kind
of bang is [initbang] from the library iemguts.;
#X text 55 216 [loadbanger] works with both kinds of bangs. By default
\, it sends the "init" bang \, but if you reinstantiate or duplicate
it \, it'll also send a bang like [loadbang]. Test this below.;
#X connect 0 0 3 0;
#X connect 0 1 2 0;
#X connect 0 2 1 0;
#X connect 7 0 6 0;
#X connect 7 1 5 0;
#X connect 7 2 4 0;
#X connect 8 0 7 0;
#X restore 474 211 pd details;
#X obj 336 183 else/lb;
#X obj 337 230 metro 500;
#X obj 337 257 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 337 207 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 71 90 [loadbanger] (or [lb]) sends "bangs" (from right to left)
when loading the patch and also sends bangs when receiving any message
or clicked on. The number of outputs is defined by the argument (1
by default). [lb] is also useful for dynamic patching (for creating
inlets/outlets).;
#X obj 127 223 else/loadbanger 2;
#X text 52 209 click on it =====>, f 9;
#N canvas 939 198 513 379 -next 0;
#X obj 85 211 print next;
#X text 34 23 the -next flag changes the type of load bang from "init"
to "load". This can be useful to manage the order of bangs for more
than one [loadbanger] \, so you can have one or more sending bangs
first by default \, and another sending it "next".;
#X obj 85 177 else/loadbanger -next;
#X obj 279 213 print first;
#X obj 279 178 else/loadbanger;
#X text 37 99 If you check pd's terminal window after loading this
help file \, you'll see that the [loadbanger] object with the -next
flag is sent after the others.;
#X text 41 266 Another detail about order of execution is that "init"
bangs are sent first in subpatches and abstractions than in parent
patches. So you can also use that to control the order in which [loadbang]
objects are triggered.;
#X connect 2 0 0 0;
#X connect 4 0 3 0;
#X restore 488 234 pd -next;
#X text 196 299 - any message triggers bangs;
#X text 399 182 (abbreviation);
#X connect 15 0 37 0;
#X connect 20 0 37 0;
#X connect 33 0 34 0;
#X connect 35 0 33 0;
#X connect 37 0 19 0;
#X connect 37 0 25 0;
#X connect 37 1 24 0;
#X connect 37 1 26 0;
