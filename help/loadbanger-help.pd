#N canvas 655 111 564 457 10;
#X obj 6 290 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 6 326 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 6 361 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 102 335 cnv 17 3 17 empty empty n 5 9 0 16 -228856 -162280 0
;
#X obj 6 426 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 308 6 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 307 5 pd;
#X obj 347 13 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 25 42 cnv 4 4 4 empty empty Multiple 0 28 2 18 -233017 -1 0
;
#X obj 460 13 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 480 13 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 517 13 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 466 28 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 504 28 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 98 42 cnv 4 4 4 empty empty loadbangs 0 28 2 18 -233017 -1 0
;
#X obj 127 193 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 5 5 cnv 15 301 42 empty empty loadbanger 20 20 2 37 -233017
-1 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 4 5 graph;
#X obj 102 299 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 104 257 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 160 193 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 161 335 bang;
#X text 196 335 - bang messages at loading or when activated;
#X text 132 299 anything;
#X obj 243 255 print lb-1;
#X obj 127 257 print lb-2;
#X obj 220 256 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 132 371 1) float - number of outputs (default 1);
#X obj 6 396 cnv 3 550 3 empty empty flags 8 12 0 13 -228856 -1 0;
#X obj 337 183 else/lb;
#X obj 337 230 metro 500;
#X obj 337 257 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 337 207 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 127 223 else/loadbanger 2;
#X text 52 209 click on it =====>, f 9;
#X text 196 299 - any message triggers bangs;
#X text 400 182 (abbreviation);
#N canvas 886 173 540 434 abstractions 0;
#X obj 310 255 else/sampler~ 4;
#X obj 80 255 else/sampler~;
#X text 47 110 This makes it possible to create abstractions with variable
inlets/outlets via dynamic patching \, which simply does not work if
you're using [loadbang] instead.;
#X obj 190 255 else/sampler~ 2;
#X text 45 33 So \, by default \, [loadbanger] uses the "load" type
of bang when loading the patch. As said before \, if you change it
to "-init" mode \, the bang will be sent first in subpatches and abstractions.
Not only that \, but the bang is sent also before the connections are
made in the parent patch.;
#X text 50 163 In ELSE \, the [sampler~] abstraction uses [loadbanger]
with the "-init" flag for that purpose \, so it can have a variable
number of outlets depending on the first optional float argument (1
by default).;
#X text 59 312 Important Note: If you're using [loadbanger] inside
an abstraction and neeed it to send a control data throughout an outlet
to a parent patch \, you cannot use the -init flag. That's because
\, as stated \, these are triggered before the connections are made
\, so a value is not sent out.;
#X restore 431 252 pd abstractions \; dynamic patching;
#X text 71 90 [loadbanger] (or [lb]) sends "bangs" (from right to left)
when loading the patch and also sends bangs when receiving any message
or clicked on. The number of outputs is defined by the argument (1
by default). [lb] can also be useful for dynamic patching (for creating
inlets/outlets).;
#X text 157 405 -init: sets loadbang to "init mode";
#N canvas 532 220 953 429 -init 0;
#X obj 895 360 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 816 360 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 737 360 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 681 362 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 605 361 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 530 361 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 530 335 trigger bang bang bang;
#X obj 530 305 loadbang;
#X obj 533 150 print next;
#X obj 727 152 print first;
#X text 22 31 Pure Data can send two different kind of bangs when loading
the patch. The [loadbang] object in Pd Vanilla sends a bang when the
patch has been loaded. Let's name this type of bang as "load".;
#X text 23 94 But there is also another type of bang that Pd can send
\, lets call it "init" bang. This second type is sent before "load".
A famous external that just uses this kind of bang is [initbang] from
the library iemguts.;
#X text 23 162 [loadbanger] works with both kinds of bangs. By default
\, it sends the "load" bang \, but if you can change to "init mode"
with the "-init" flag.;
#X obj 727 117 else/loadbanger -init;
#X obj 533 116 else/loadbanger;
#X obj 737 334 else/loadbanger -init 3;
#X text 23 215 The "init" bangs are sent before "load" bangs. It is
also sent first inside subpatches and abstractions than in parent patches.
In the case of abstractions \, this is mostly useful for dynamic patching
\, because you can initialize it with a dynamic number of inlets/outlets
as exlpained in the next example.;
#X text 24 312 One extra functionality from having both types of bangs
is that you can control the order of execution \, where you can have
one group of [loadbanger] objects initializing first than another [loadbanger].
But this might be tricky and unrelieable if you're dealing with abstractions.
So \, if you're not sure what you're doing \, just stick with regular
"load" bangs.;
#X text 485 38 If you check pd's terminal window after loading this
help file \, you'll see that the [loadbanger] object with the -init
flag is sent before the others.;
#X text 499 204 Another difference from these "two" types of bangs
is that a "load" bang is sent again if you reinstantiate or duplicate
the object. The [loadbanger] object will also do that even if it is
in "init" mode. You can test that in this subpatch.;
#X connect 6 0 5 0;
#X connect 6 1 4 0;
#X connect 6 2 3 0;
#X connect 7 0 6 0;
#X connect 13 0 9 0;
#X connect 14 0 8 0;
#X connect 15 0 2 0;
#X connect 15 1 1 0;
#X connect 15 2 0 0;
#X restore 485 225 pd -init;
#X connect 15 0 33 0;
#X connect 20 0 33 0;
#X connect 29 0 32 0;
#X connect 30 0 31 0;
#X connect 32 0 30 0;
#X connect 33 0 19 0;
#X connect 33 0 25 0;
#X connect 33 1 24 0;
#X connect 33 1 26 0;
