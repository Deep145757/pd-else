#N canvas 614 95 561 678 10;
#X obj 5 389 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 5 507 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 5 561 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 5 649 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 95 516 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 95 397 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 172 516 signal;
#X obj 24 41 cnv 4 4 4 empty empty Attack/Decay/Sustain/Release 0 28
2 18 -233017 -1 0;
#X obj 249 41 cnv 4 4 4 empty empty gated 0 28 2 18 -233017 -1 0;
#X obj 95 420 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 130 420 float/signal;
#X obj 111 311 else/out~;
#X obj 154 271 *~;
#X obj 231 274 vsl 18 100 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 -228856
-1 -1 0 1;
#X obj 231 246 else/sig2float~;
#X text 254 364 0;
#X text 254 270 1;
#X obj 3 4 cnv 15 301 42 empty empty adsr~ 20 20 2 37 -233017 -1 0
;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X text 131 397 float/signal;
#X text 226 419 - attack time in ms;
#X obj 95 441 cnv 17 3 17 empty empty 2 5 9 0 16 -228856 -162280 0
;
#X text 130 441 float/signal;
#X text 226 516 - envelope signal;
#X text 111 567 1) float - attack time in ms (default 0);
#X obj 169 185 tgl 20 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 299 41 cnv 4 4 4 empty empty envelope 0 28 2 18 -233017 -1 0
;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 91 226 osc~ 440;
#X text 227 397 - gate values;
#X obj 229 188 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 290 188 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 230 170 attack;
#N canvas 419 246 872 559 example 0;
#X obj 648 202 else/display~ 7;
#X obj 502 205 else/display~ 7;
#X text 708 205 <= gate value;
#X obj 502 251 else/sawtooth~;
#X obj 596 324 *~;
#X obj 553 406 else/out~;
#X obj 648 331 else/display~ 7;
#X obj 596 364 else/lowpass~ 0 20;
#X obj 648 303 else/rescale~ 100 1500;
#X text 710 334 <= cutoff;
#X text 564 209 <= Hz;
#X obj 648 133 else/randpulse~ 0.5;
#X obj 502 179 else/randf~ 50 150;
#X obj 648 245 else/adsr~ 100 300 0.7 100;
#X text 468 61 [adsr~] accepts any gate value \, positive or negative
and above 1 or below -1 \, so you can use it to control anything besides
amplitude.;
#X obj 77 109 tgl 20 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 77 341 poly 4 1;
#X obj 77 369 pack f f f;
#X obj 77 397 route 1 2 3 4;
#X obj 272 407 out~;
#X obj 77 208 makenote 100 1500;
#X obj 77 137 metro 800;
#X obj 77 172 expr random(36 \, 72);
#X obj 272 364 catch~ \$0-voice;
#X obj 77 238 keyboard 16 80 3 2;
#N canvas 1014 119 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 213 99 / 127;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 -228856 -1
-1 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 128 278 throw~ \$0-voice;
#X obj 39 144 * 1.497;
#X connect 0 0 10 0;
#X connect 1 0 11 0;
#X connect 2 0 5 0;
#X connect 3 0 8 2;
#X connect 4 0 13 0;
#X connect 6 0 9 0;
#X connect 6 0 14 0;
#X connect 8 0 4 0;
#X connect 9 0 3 0;
#X connect 10 0 6 0;
#X connect 10 1 1 0;
#X connect 11 0 3 1;
#X connect 11 0 4 1;
#X connect 11 0 12 0;
#X connect 11 1 2 0;
#X connect 12 0 7 0;
#X connect 14 0 8 0;
#X restore 77 500 pd voice;
#N canvas 1014 119 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 213 99 / 127;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 -228856 -1
-1 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 128 278 throw~ \$0-voice;
#X obj 39 144 * 1.497;
#X connect 0 0 10 0;
#X connect 1 0 11 0;
#X connect 2 0 5 0;
#X connect 3 0 8 2;
#X connect 4 0 13 0;
#X connect 6 0 9 0;
#X connect 6 0 14 0;
#X connect 8 0 4 0;
#X connect 9 0 3 0;
#X connect 10 0 6 0;
#X connect 10 1 1 0;
#X connect 11 0 3 1;
#X connect 11 0 4 1;
#X connect 11 0 12 0;
#X connect 11 1 2 0;
#X connect 12 0 7 0;
#X connect 14 0 8 0;
#X restore 95 476 pd voice;
#N canvas 1014 119 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 213 99 / 127;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 -228856 -1
-1 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 128 278 throw~ \$0-voice;
#X obj 39 144 * 1.497;
#X connect 0 0 10 0;
#X connect 1 0 11 0;
#X connect 2 0 5 0;
#X connect 3 0 8 2;
#X connect 4 0 13 0;
#X connect 6 0 9 0;
#X connect 6 0 14 0;
#X connect 8 0 4 0;
#X connect 9 0 3 0;
#X connect 10 0 6 0;
#X connect 10 1 1 0;
#X connect 11 0 3 1;
#X connect 11 0 4 1;
#X connect 11 0 12 0;
#X connect 11 1 2 0;
#X connect 12 0 7 0;
#X connect 14 0 8 0;
#X restore 114 450 pd voice;
#N canvas 1014 119 477 340 voice 0;
#X obj 125 33 inlet;
#X obj 213 99 / 127;
#X obj 398 171 tgl 40 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 125 186 *~;
#X obj 128 247 *~;
#X obj 398 223 switch~;
#X obj 125 95 mtof;
#X obj 262 208 vsl 20 100 0 1 0 0 xxx xx empty 0 -9 0 10 -228856 -1
-1 0 1;
#X obj 38 185 else/sine~;
#X obj 125 136 else/sine~;
#X obj 125 65 unpack float float;
#X obj 213 136 else/adsr~ 500 200 0.5 1000;
#X obj 262 179 else/sig2float~;
#X obj 128 278 throw~ \$0-voice;
#X obj 39 144 * 1.497;
#X connect 0 0 10 0;
#X connect 1 0 11 0;
#X connect 2 0 5 0;
#X connect 3 0 8 2;
#X connect 4 0 13 0;
#X connect 6 0 9 0;
#X connect 6 0 14 0;
#X connect 8 0 4 0;
#X connect 9 0 3 0;
#X connect 10 0 6 0;
#X connect 10 1 1 0;
#X connect 11 0 3 1;
#X connect 11 0 4 1;
#X connect 11 0 12 0;
#X connect 11 1 2 0;
#X connect 12 0 7 0;
#X connect 14 0 8 0;
#X restore 133 426 pd voice;
#X text 36 19 Here we have [keyboard] displaying randomly generated
notes and driving a [poly] with 4 voices. Also see that each voice
subpatch has [adsr~]'s status outlet to control the DSP status for
that subpatch - open and check it. You should also try pd's [clone]
object for managing polyphonic synths.;
#X obj 320 498 clone;
#X text 244 499 see also:;
#X connect 0 0 13 0;
#X connect 1 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 7 0;
#X connect 6 0 7 1;
#X connect 7 0 5 1;
#X connect 7 0 5 0;
#X connect 8 0 6 0;
#X connect 11 0 0 0;
#X connect 11 0 12 0;
#X connect 12 0 1 0;
#X connect 13 0 4 1;
#X connect 13 0 8 0;
#X connect 15 0 21 0;
#X connect 16 0 17 0;
#X connect 16 1 17 1;
#X connect 16 2 17 2;
#X connect 17 0 18 0;
#X connect 18 0 25 0;
#X connect 18 1 26 0;
#X connect 18 2 27 0;
#X connect 18 3 28 0;
#X connect 20 0 24 0;
#X connect 20 1 24 1;
#X connect 21 0 22 0;
#X connect 22 0 20 0;
#X connect 23 0 19 0;
#X connect 23 0 19 1;
#X connect 24 0 16 0;
#X restore 468 358 pd example;
#X obj 351 188 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 412 188 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 414 170 release;
#X text 292 170 decay;
#X text 352 170 sustain;
#X text 333 332 see also:;
#X obj 342 351 else/asr~;
#X obj 95 463 cnv 17 3 17 empty empty 3 5 9 0 16 -228856 -162280 0
;
#X text 130 463 float/signal;
#X obj 95 485 cnv 17 3 17 empty empty 4 5 9 0 16 -228856 -162280 0
;
#X text 130 485 float/signal;
#X text 226 484 - release time in ms;
#X text 111 627 4) float - release time in ms (default 0);
#X text 111 587 2) float - decay time in ms (default 0);
#X text 226 440 - decay time in ms;
#X text 226 462 - sustain amplitude (ratio to gate value);
#X text 111 608 3) float - sustain amplitude ratio to gate value (default
0), f 61;
#X text 136 187 gate;
#N canvas 786 244 503 425 triggered 0;
#X obj 216 214 else/display~ 7;
#X obj 176 337 else/out~;
#X obj 216 89 tgl 20 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 176 295 *~;
#X obj 104 221 else/brown~;
#X text 276 217 <= gate value;
#X text 229 151 <= impulse;
#X obj 216 254 else/adsr~ 50 100 0.5 500;
#X obj 216 118 else/tempo~ 60;
#X obj 216 185 else/timed.gate~ 500;
#X text 38 24 You can use the [timed.gate~] object to create a timed
gate so you can trigger the envelope.;
#X connect 0 0 7 0;
#X connect 2 0 8 0;
#X connect 3 0 1 0;
#X connect 3 0 1 1;
#X connect 4 0 3 0;
#X connect 7 0 3 1;
#X connect 8 0 9 0;
#X connect 9 0 0 0;
#X restore 450 321 pd triggered \; by impulses;
#X text 68 87 [adsr~] is a linear attack/decay/sustain/release gated
envelope. At a gate on value (transition from 0 to any value) \, the
envelope starts its attack ramp. After that \, a decay ramp goes to
the sustain point \, which is specified as a ratio of the gate value.
A gate off (transition from any value to 0) makes [adsr~] go to 0 at
the specified release time in ms.;
#X obj 412 243 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 412 267 else/display;
#X obj 95 538 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 179 538 float;
#N canvas 70 217 601 559 status 0;
#X obj 382 340 switch~;
#X obj 382 272 tgl 50 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 178 310 *~;
#X obj 116 248 osc~ 440;
#X obj 153 360 dac~;
#X obj 228 288 else/sig2float~;
#X obj 228 324 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 -228856
-1 -1 0 1;
#X text 53 38 [adsr~] has a right outlet that sends a status value
(1 when the envelope starts and 0 when it ends). This can be useful
for different things \, but particularly to turn on and off the DSP
processing of a subopatch or abstraction with [switch~].;
#X text 55 118 This only works for control data such as MIDI \, and
is possible because the float input of [adsr~] will always turn the
status on \, so you can use it to start the DSP. See below., f 62
;
#X obj 315 446 else/setdsp~;
#X msg 196 189 0.25;
#X msg 215 214 0;
#X text 235 190 gate on;
#X text 249 213 gate off;
#X obj 196 246 else/adsr~ 100 300 0.25 500;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 2 0 4 1;
#X connect 3 0 2 0;
#X connect 5 0 6 0;
#X connect 10 0 14 0;
#X connect 11 0 14 0;
#X connect 14 0 2 1;
#X connect 14 0 5 0;
#X connect 14 1 1 0;
#X restore 474 295 pd status;
#X text 226 538 - envelope status (on: 1 / off: 0);
#X obj 169 216 else/adsr~ 1000 500 0.5 1000, f 41;
#X connect 12 0 11 0;
#X connect 12 0 11 1;
#X connect 14 0 13 0;
#X connect 25 0 67 0;
#X connect 35 0 12 0;
#X connect 37 0 67 1;
#X connect 38 0 67 2;
#X connect 41 0 67 3;
#X connect 42 0 67 4;
#X connect 61 0 62 0;
#X connect 67 0 12 1;
#X connect 67 0 14 0;
#X connect 67 1 61 0;
