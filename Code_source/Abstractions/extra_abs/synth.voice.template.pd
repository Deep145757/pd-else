#N canvas 340 132 908 509 12;
#X declare -path else;
#X obj 120 371 *~;
#X obj 37 282 mtof;
#X obj 120 446 outlet~;
#X obj 128 39 inlet;
#X obj 322 346 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 303 378 switch~;
#X obj 230 109 print other messages;
#X obj 325 202 else/initmess \\\$0-rel;
#X obj 325 229 else/dollsym 1;
#X obj 300 259 send;
#X obj 128 79 route list adsr;
#X obj 179 264 unpack f f f f;
#X text 338 257 send release value to parent, f 15;
#X text 518 152 This is a template to build synth abstractions., f 49;
#X obj 613 81 declare -path else;
#X obj 37 310 else/bl.saw~;
#X obj 71 233 unpack f f;
#X text 519 308 If you have a polyphonic synth you also want to send the release value to the parent [synth~] abstraction loader \, so the [voices] object also handles the release time for the voice allocation., f 49;
#X text 518 221 You probably need to use an envelope like [adsr~] to handle MIDI velocity and convert MIDI pitch to frequency and feed an oscillator. A [switch~] object is also desired to free the CPU when there's no active voice and [adsr~] can feed it., f 49;
#X obj 200 214 else/receiver;
#X obj 200 183 else/dollsym 1;
#X obj 200 156 else/initmess \\\$0-args;
#X text 518 175 Arguments are received via the [receiver] from the parent., f 49;
#X text 370 152 get arguments from parent, f 13;
#X obj 138 310 else/adsr~ 20 10 0.7 150;
#X connect 0 0 2 0;
#X connect 1 0 15 0;
#X connect 3 0 10 0;
#X connect 7 0 8 0;
#X connect 8 0 9 1;
#X connect 10 0 16 0;
#X connect 10 1 11 0;
#X connect 10 2 6 0;
#X connect 11 0 24 1;
#X connect 11 1 24 2;
#X connect 11 2 24 3;
#X connect 11 3 9 0;
#X connect 11 3 24 4;
#X connect 15 0 0 0;
#X connect 16 0 1 0;
#X connect 16 1 24 0;
#X connect 19 0 11 0;
#X connect 20 0 19 0;
#X connect 21 0 20 0;
#X connect 24 0 0 1;
#X connect 24 1 4 0;
#X connect 24 1 5 0;
