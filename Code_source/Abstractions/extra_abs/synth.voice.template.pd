#N canvas 200 116 911 494 12;
#X declare -path else;
#X obj 135 364 *~;
#X obj 52 275 mtof;
#X obj 135 439 outlet~;
#X obj 118 42 inlet;
#X obj 239 339 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 220 371 switch~;
#X obj 220 112 print other messages;
#X obj 289 212 else/initmess \\\$0-rel;
#X obj 289 239 else/dollsym 1;
#X obj 264 269 send;
#X obj 118 82 route list adsr;
#X obj 169 227 unpack f f f f;
#X obj 190 147 loadbang;
#X msg 190 176 10 10 0.75 250;
#X obj 153 303 else/adsr~;
#X text 302 267 send release value to parent, f 15;
#X text 495 119 This is a template to build synth abstractions., f 49;
#X obj 583 58 declare -path else;
#X obj 52 303 else/bl.saw~;
#X obj 52 226 unpack f f;
#X text 496 235 If you have a polyphonic synth you also want to send the release value to the parent [synth~] abstraction loader \, so the [voices] object also handles the release time for the voice allocation., f 49;
#X text 495 148 You probably need to use an envelope like [adsr~] to handle MIDI velocity and convert MIDI pitch to frequency and feed an oscillator. A [switch~] object is also desired to free the CPU when there's no active voice and [adsr~] can feed it., f 49;
#X connect 0 0 2 0;
#X connect 1 0 18 0;
#X connect 3 0 10 0;
#X connect 7 0 8 0;
#X connect 8 0 9 1;
#X connect 10 0 19 0;
#X connect 10 1 11 0;
#X connect 10 2 6 0;
#X connect 11 0 14 1;
#X connect 11 1 14 2;
#X connect 11 2 14 3;
#X connect 11 3 9 0;
#X connect 11 3 14 4;
#X connect 12 0 13 0;
#X connect 13 0 11 0;
#X connect 14 0 0 1;
#X connect 14 1 4 0;
#X connect 14 1 5 0;
#X connect 18 0 0 0;
#X connect 19 0 1 0;
#X connect 19 1 14 0;
