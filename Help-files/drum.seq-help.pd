#N struct 1006-slot float x float y float slotsize float color float
width float bordercolor;
#N struct 1013-slot float x float y float slotsize float color float
width float bordercolor;
#N canvas 675 97 567 646 10;
#X obj 24 39 cnv 4 4 4 empty empty Drum 0 28 2 18 -233017 -1 0;
#X obj 75 39 cnv 4 4 4 empty empty sequence 0 28 2 18 -233017 -1 0
;
#X obj 215 39 cnv 4 4 4 empty empty GUI 0 28 2 18 -233017 -1 0;
#X obj 306 3 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 2 pd;
#X obj 345 10 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 458 10 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 10 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 10 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 25 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 25 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 7 310 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 7 491 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 7 546 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 7 619 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 122 318 cnv 17 3 168 empty empty 0 5 9 0 16 -228856 -162280
0;
#X obj 121 498 cnv 17 3 40 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 204 497 list;
#X text 189 583 3) float - cell size in pixels (default 20), f 47
;
#X text 204 330 list;
#X text 156 458 size <float>;
#X text 198 386 clear;
#X text 244 386 - clears active cells (no output), f 41;
#X text 192 400 export;
#X text 198 372 float;
#X text 192 414 import;
#X text 150 472 embed <float>;
#X text 244 400 - export contents as an array, f 41;
#X text 244 414 - import contents as an array, f 41;
#X text 189 598 4) float - embed flag \, (default 0), f 47;
#X text 244 472 - non zero save internal contents with the object;
#X obj 151 39 cnv 4 4 4 empty empty pattern 0 28 2 18 -233017 -1 0
;
#X text 244 330 - sets track \, slot and status (no output), f 42
;
#X text 244 372 - sets slot value and output tracks values;
#X text 189 553 1) float - number of tracks (default 2), f 47;
#X text 189 568 2) float - number of slots (default 8), f 47;
#N canvas 864 57 557 654 drum 0;
#X obj 360 516 else/pluck~ 50 2500 10000;
#X obj 409 451 impseq~;
#X obj 299 569 else/out~;
#X obj 190 112 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 300 419 sel 1;
#X obj 353 419 sel 1;
#X obj 294 177 loadbang;
#X msg 211 212 clear;
#X msg 294 200 import 1 0 0 0 1 0 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 1
0, f 27;
#X obj 190 136 else/tempo 120;
#X obj 190 288 drum.seq 3 8 20 0 0 0 0 0 0 0 0 0 0 0 0;
#X obj 406 419 print drum.seq;
#X msg 201 188 export;
#X obj 300 468 else/play.file~ dholak.aif, f 15;
#X obj 198 468 else/play.file~ bagal.aif, f 15;
#X obj 198 418 sel 1;
#X obj 247 382 route 1 2 3, f 27;
#X text 101 31 Here's an example on how to use [drum.seq] for a drum
pattern sequencer patch. You can also see how some of the messages
work (note that tracks and slots are indexed from 1)., f 53;
#X obj 190 164 else/rand.i 1 8;
#X obj 88 119 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 88 143 else/tempo 120;
#X obj 45 143 sel 0;
#X text 216 112 <= random values;
#X msg 45 176 goto 1;
#X msg 310 258 track 3 0 1 1 0 0 1 1 0;
#X msg 301 235 track 1 1 0 1 0 1 1 0 1;
#X obj 190 355 route bang;
#X obj 190 382 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 115 385 finished =>;
#X connect 0 0 2 0;
#X connect 1 0 0 1;
#X connect 3 0 9 0;
#X connect 4 0 13 0;
#X connect 5 0 1 0;
#X connect 6 0 8 0;
#X connect 7 0 10 0;
#X connect 8 0 10 0;
#X connect 9 0 18 0;
#X connect 10 0 26 0;
#X connect 12 0 10 0;
#X connect 13 0 2 0;
#X connect 14 0 2 0;
#X connect 15 0 14 0;
#X connect 16 0 15 0;
#X connect 16 1 4 0;
#X connect 16 2 5 0;
#X connect 16 3 11 0;
#X connect 18 0 10 0;
#X connect 19 0 20 0;
#X connect 19 0 21 0;
#X connect 20 0 10 0;
#X connect 21 0 23 0;
#X connect 23 0 10 0;
#X connect 24 0 10 0;
#X connect 25 0 10 0;
#X connect 26 0 27 0;
#X connect 26 1 16 0;
#X restore 487 266 pd drum \; sequencer;
#X text 144 428 tracks <float>;
#X text 150 443 slots <float>;
#X text 244 428 - sets number of tracks (clears data), f 41;
#X text 244 443 - sets number of slots (clears data), f 41;
#X text 244 458 - sets cell size in pixels (clears data), f 41;
#X obj 211 125 tgl 16 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X msg 166 149 clear;
#X obj 224 175 hradio 20 1 0 4 empty empty empty 0 -8 0 10 -228856
-1 -1 3;
#X text 77 247 click on the slots =>;
#X obj 211 235 else/drum.seq 2 4 20 0 0 0 0 0 0 0 0 0 0 0 0;
#X obj 211 284 print track-value;
#X obj 3 2 cnv 15 301 42 empty empty drum.seq 20 20 2 37 -233017 -1
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 2 graph;
#X text 50 86 [drum.seq] is similar to [mtx.ctl] \, but provides a
drum grid so you can send a float and query for the track values.,
f 65;
#X text 150 525 export <list>;
#X text 244 525 - array of contexts via the "export" message;
#X obj 224 203 + 1;
#X msg 211 149 1 1 \$1 \, 1 4 \$1 \, 2 2 \$1;
#X text 298 238 <= track 1;
#X text 298 258 <= track 2;
#X text 244 497 - track and slot value (indexed from 1), f 44;
#X obj 150 185 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 96 186 goto 4;
#X text 204 316 bang;
#X text 244 316 - gets sequence value and moves to the next;
#X text 156 358 goto <float>;
#X text 244 358 - sets slot value;
#X text 156 345 track <list>;
#X text 244 345 - sets track values (1st value sets track number);
#X text 204 511 bang;
#X text 244 511 - when reaching the end of the sequence, f 44;
#X connect 42 0 54 0;
#X connect 43 0 46 0;
#X connect 44 0 53 0;
#X connect 46 0 47 0;
#X connect 53 0 46 0;
#X connect 54 0 46 0;
#X connect 58 0 46 0;
#X connect 59 0 46 0;
