#N canvas 592 45 561 603 10;
#X obj 307 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 306 4 pd;
#X obj 346 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 24 41 cnv 4 4 4 empty empty Loop 0 28 2 18 -233017 -1 0;
#X obj 459 12 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 479 12 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 516 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 465 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 503 27 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#X obj 73 41 cnv 4 4 4 empty empty counter 0 28 2 18 -233017 -1 0;
#X obj 4 4 cnv 15 301 42 empty empty loop 20 20 2 37 -233017 -1 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X obj 5 576 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 7 268 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 6 409 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 7 460 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 95 275 cnv 17 3 110 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 94 417 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 166 318 bang;
#X text 114 467 1) float;
#X obj 88 162 bng 17 250 50 0 empty empty empty 0 -6 0 8 -228856 -1
-1;
#X text 114 493 2) float;
#X obj 115 244 print counter;
#X text 160 276 float;
#N canvas 858 150 405 444 pause/resume 0;
#X msg 52 322 pause;
#X obj 133 180 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 30 23 [loop] iterates in a programing loop fashion. So \, once
it starts \, it goes all the way to the end as fast as possible. In
order to stop it \, you need to break the loop with some logic as below
\, where we use [select] to pause [loop] when the counter reaches "105".
;
#X text 31 102 Thus \, before breaking the loop \, it counts from 101
to 105 \, and you can then continue to output the remaining count (from
106 to 110) with the "resume" message.;
#X msg 152 218 continue;
#X obj 232 290 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 111 256;
#X obj 232 332 print counter;
#X text 161 183 <= start from starting value;
#X text 214 217 <= continue from where it was paused, f 20;
#X text 37 388 This may be useful to stop the loop if a conditional
was met.;
#X obj 133 291 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 133 250 else/loop 100 111;
#X obj 52 292 select 105;
#X connect 0 0 11 0;
#X connect 1 0 11 0;
#X connect 4 0 11 0;
#X connect 5 0 6 0;
#X connect 10 0 6 0;
#X connect 11 0 10 0;
#X connect 11 1 5 0;
#X connect 11 1 12 0;
#X connect 12 0 0 0;
#X restore 450 198 pd pause/resume;
#X obj 287 159 bng 17 250 50 0 empty empty empty 0 -6 0 8 -228856 -1
-1;
#X text 160 360 pause;
#X text 142 374 continue;
#X text 201 439 - counter output, f 32;
#X text 160 439 float;
#X text 172 467 -;
#X text 197 318 - starts the loop, f 56;
#X text 197 360 - stops the loop, f 56;
#X text 197 374 - countinues the loop after being paused, f 56;
#X text 166 304 list;
#X text 197 304 - two floats set range (start / end) and starts the
loop;
#X msg 314 159 0 9;
#X obj 4 526 cnv 3 550 3 empty empty flags 8 12 0 13 -228856 -1 0;
#X text 136 531 -offset <float>;
#X msg 391 159 -3 3;
#X msg 346 159 20 15;
#N canvas 766 265 489 314 array_sweep 0;
#X text 96 19 [loop] is very useful for sweeping through arrays.;
#X obj 35 53 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 231 99 cnv 15 198 138 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array array_\$0 100 float 1;
#A 0 -0.857145 -0.700001 -0.657143 -0.6 -0.585727 -0.585727 -0.585727
-0.580965 -0.576203 -0.571441 -0.547631 -0.523821 -0.500011 -0.457153
-0.300006 -0.171432 -0.0714296 5.96046e-07 0.0285727 0.0571448 0.0857168
0.104765 0.123813 0.142861 0.157147 0.171433 0.185719 0.200005 0.214291
0.228577 0.242863 0.250006 0.257149 0.263499 0.269848 0.276197 0.282547
0.288896 0.295245 0.301595 0.307944 0.314294 0.314294 0.314294 0.314294
0.314294 0.314294 0.291436 0.268578 0.245721 0.222863 0.200005 0.166671
0.133337 0.100003 0.0828596 0.0657164 0.0485731 0.0314299 0.0142866
0.0142866 0.0142866 0.0142866 0.0392872 0.0642878 0.0892884 0.114289
0.16429 0.214291 0.257149 0.300007 0.32858 0.357152 0.385724 0.402867
0.42001 0.437153 0.454297 0.47144 0.476202 0.480964 0.485726 0.489298
0.492869 0.496441 0.500012 0.500012 0.500012 0.500012 0.500012 0.500012
0.585715 0.642858 0.67143 0.685715 0.700001 0.728573 0.800002 0.971432
0.985717;
#X coords 0 1 99 -1 200 140 1 0 0;
#X restore 230 98 graph;
#X obj 35 136 else/loop;
#X text 434 225 0;
#X text 433 94 1;
#X obj 86 221 else/display;
#X obj 86 165 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 99 256;
#X floatatom 35 110 5 0 0 0 - - -;
#X obj 86 254 print array_values;
#X obj 35 83 expr size("array_\$0");
#X obj 86 193 tabread array_\$0;
#X connect 1 0 11 0;
#X connect 4 1 8 0;
#X connect 7 0 10 0;
#X connect 8 0 12 0;
#X connect 9 0 4 0;
#X connect 11 0 9 0;
#X connect 12 0 7 0;
#X restore 456 219 pd array_sweep;
#X text 221 191 two values set start and end, f 14;
#X obj 115 218 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 115 165 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 94 438 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 166 420 bang;
#X text 201 420 - a bang when the loop is done, f 32;
#X text 172 493 - sets the end value (optional), f 62;
#X text 233 530 - sets offset value (default 0), f 37;
#X obj 115 194 else/loop 10;
#X obj 314 194 else/loop 1 10;
#X text 197 331 - sets the starting value of the counter, f 56;
#X text 106 332 offset <float>;
#X text 197 345 - sets the increment value of the counter, f 56;
#N canvas 752 260 584 290 offset 0;
#X obj 48 123 bng 17 250 50 0 empty empty empty 0 -6 0 8 -228856 -1
-1;
#X obj 213 235 print counter;
#X obj 213 196 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 309 102 bng 17 250 50 0 empty empty empty 0 -6 0 8 -228856 -1
-1;
#X obj 456 226 print counter;
#X msg 344 126 15 20;
#X msg 99 141 offset \$1;
#X obj 309 165 else/loop 5 10 -offset 10;
#X obj 99 120 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 78 98 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 394 134 offset \$1;
#X obj 394 113 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 338 101 -10 -5;
#X obj 78 170 else/loop 10 -offset -5;
#X text 110 25 When you give it a float \, the counter starts counting
from 0 But you can set an offset value wit h the -offset flag or the
"offset" message., f 61;
#X obj 456 192 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X connect 0 0 13 0;
#X connect 2 0 1 0;
#X connect 3 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 13 0;
#X connect 7 0 4 0;
#X connect 7 1 15 0;
#X connect 8 0 6 0;
#X connect 9 0 13 0;
#X connect 10 0 7 0;
#X connect 11 0 10 0;
#X connect 12 0 7 0;
#X connect 13 0 1 0;
#X connect 13 1 2 0;
#X connect 15 0 4 0;
#X restore 486 156 pd offset;
#X text 184 467 sets the number of iterations if only one argument
is given \, or start value if there are more arguments (default 1)
;
#X text 172 508 - sets a counter step value (default 1), f 62;
#X text 118 346 step <float>;
#N canvas 563 250 693 269 step 0;
#X obj 82 104 bng 17 250 50 0 empty empty empty 0 -6 0 8 -228856 -1
-1;
#X obj 203 214 print counter;
#X msg 170 121 step \$1;
#X msg 118 108 8 0 2;
#X text 20 19 The 3rd argument or element in a list defines a step
value for the counter (upwards or downwards). You can also set this
with the "step" message., f 50;
#X obj 437 103 bng 17 250 50 0 empty empty empty 0 -6 0 8 -228856 -1
-1;
#X obj 437 200 print counter;
#X obj 437 141 else/loop 5 -step 3;
#X obj 170 98 nbx 3 14 0 10 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X msg 110 80 1 10 3;
#X msg 484 114 step \$1;
#X obj 484 91 nbx 3 14 0 10 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X obj 110 156 else/loop 1 10 3;
#X text 352 20 Note the difference when we only have the number of
iterations and no start/end values. Here we only define the number
of iterations and the counter step., f 48;
#X obj 203 181 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 10 256;
#X obj 548 166 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 12 256;
#X connect 0 0 12 0;
#X connect 2 0 12 0;
#X connect 3 0 12 0;
#X connect 5 0 7 0;
#X connect 7 0 6 0;
#X connect 7 1 15 0;
#X connect 8 0 2 0;
#X connect 9 0 12 0;
#X connect 10 0 7 0;
#X connect 11 0 10 0;
#X connect 12 0 1 0;
#X connect 12 1 14 0;
#X connect 14 0 1 0;
#X connect 15 0 6 0;
#X restore 498 177 pd step;
#X text 114 508 3) float;
#X text 148 545 -step <float>;
#X text 233 544 - sets counter step value (default 1);
#X obj 184 165 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 94 388 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 160 389 float;
#X text 201 389 - sets number of iterations, f 32;
#X text 197 275 - sets number of iterations and starts the loop, f
56;
#X text 23 188 one value sets number of iterations, f 13;
#X text 197 290 - sets number of iterations, f 56;
#X text 124 290 set <float>;
#X text 77 87 [loop] is an integers counter loop \, but it can also
loop bangs like [until] (using the -b flag). A float counts upwards
that many times. A list with two elements sets a start and end value
(and allows counting upwards or downwards). A counter step value can
be set with a third optional element in a list., f 68;
#X text 166 559 -b <float>;
#X text 233 558 - sets to bang mode;
#N canvas 918 287 349 243 -b 0;
#X obj 190 91 nbx 5 14 1 1e+37 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 12 256;
#X obj 109 88 bng 16 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 109 120 else/loop 1 -b;
#X text 82 40 With the -b flag \, [loop] becomes a basng looper like
[until], f 32;
#X obj 190 155 print bang;
#X obj 109 192 print finished;
#X connect 0 0 2 1;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 2 1 4 0;
#X restore 510 238 pd -b;
#X obj 314 243 print counter;
#X obj 314 217 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X connect 20 0 50 0;
#X connect 25 0 51 0;
#X connect 36 0 51 0;
#X connect 39 0 51 0;
#X connect 40 0 51 0;
#X connect 43 0 22 0;
#X connect 44 0 50 0;
#X connect 50 0 43 0;
#X connect 50 1 22 0;
#X connect 51 0 76 0;
#X connect 51 1 75 0;
#X connect 63 0 50 1;
#X connect 76 0 75 0;
