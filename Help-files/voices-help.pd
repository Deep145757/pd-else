#N canvas 360 36 563 590 10;
#X obj 2 3 cnv 15 301 42 empty empty voices 20 20 2 37 -233017 -1 0
;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 -128992 -233080
0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 -128992 -233080
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 -128992 -233080
0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 -128992 -233080
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 -128992 -233080
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 -128992 -233080
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 305 3 graph;
#X obj 22 39 cnv 4 4 4 empty empty Polyphonic 0 28 2 18 -233017 -1
0;
#X obj 110 39 cnv 4 4 4 empty empty voice 0 28 2 18 -233017 -1 0;
#X obj 155 39 cnv 4 4 4 empty empty allocator 0 28 2 18 -233017 -1
0;
#X obj 4 563 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 6 287 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 4 432 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 4 464 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 102 440 cnv 17 3 17 empty empty n 5 9 0 16 -228856 -162280 0
;
#X obj 103 295 cnv 17 3 110 empty empty 0 5 9 0 16 -228856 -162280
0;
#X obj 4 506 cnv 3 550 3 empty empty flags 8 12 0 13 -228856 -1 0;
#X obj 103 409 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X text 185 293 list - MIDI note messages (note and velocity pair)
, f 56;
#X text 125 349 retrig <float> - non zero sets to retrigger mode.,
f 66;
#X text 179 363 clear - clears memory without output, f 57;
#X text 179 377 flush - clears memory and output hanging notes, f
57;
#X text 137 546 -list <float>: sets to list mode and index offset (default
0), f 61;
#X text 125 335 offset <float> - sets index offset (in the context
of "list" mode), f 66;
#X obj 180 234 else/display;
#X obj 238 234 else/display;
#X obj 297 233 else/display;
#X msg 180 164 60 \$1;
#X obj 180 139 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X obj 226 139 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X obj 271 139 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 226 164 63 \$1;
#X msg 271 164 66 \$1;
#X obj 317 139 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 317 164 69 \$1;
#X text 43 84 [voices] is used to implement polyphonic synths. It's
like Pd Vanilla's [poly] object \, but with more functionalities. By
default \, it routes the voices to different outlets \, but it also
has a list mode like [poly]., f 71;
#X text 185 440 list - note messages, f 57;
#X text 179 307 float - note pitch values, f 57;
#X text 179 409 float - note velocity values, f 57;
#X text 161 471 1) float - sets number of voices (default 1);
#X text 161 486 2) float - non zero sets voice stealing (default 0)
;
#X obj 363 140 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 363 165 72 \$1;
#X obj 180 208 else/voices 2, f 20;
#X text 160 262 voice 1;
#X text 221 262 voice 2;
#N canvas 845 290 441 432 steal 0;
#X obj 139 268 else/display;
#X obj 197 268 else/display;
#X obj 256 267 else/display;
#X msg 139 198 60 \$1;
#X obj 139 173 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X obj 185 173 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X obj 230 173 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 185 198 63 \$1;
#X msg 230 198 66 \$1;
#X obj 276 173 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 276 198 69 \$1;
#X obj 322 174 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 322 199 72 \$1;
#X obj 139 242 else/voices 2, f 20;
#X text 138 297 voice 1;
#X text 199 297 voice 2;
#X obj 57 173 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 57 198 steal \$1;
#X text 37 17 In regular mode \, [voices] allocates the given number
of voices and extra voices are sent to its rightmost outlet. After
a voice is allocated \, the object needs to receive a corresponding
note-off message so that voice can be used again.;
#X text 37 82 But you can set the object to "voice stealing" mode with
the second argument or the "steal" message. This mode forces a note
off message on the first allocated voice so the extra incoming voice
"steals" it.;
#X text 257 297 extra;
#X text 42 335 The rightmost outlet can still send messages when in
"voice stealing" mode. This happens when a voice has been stolen but
you haven't sent the object a note off message. Then \, when you eventually
send a note off message \, the object won't find a corresponding note
on message and will output that message as an "extra".;
#X connect 3 0 13 0;
#X connect 4 0 3 0;
#X connect 5 0 7 0;
#X connect 6 0 8 0;
#X connect 7 0 13 0;
#X connect 8 0 13 0;
#X connect 9 0 10 0;
#X connect 10 0 13 0;
#X connect 11 0 12 0;
#X connect 12 0 13 0;
#X connect 13 0 0 0;
#X connect 13 1 1 0;
#X connect 13 2 2 0;
#X connect 16 0 17 0;
#X connect 17 0 13 0;
#X restore 492 186 pd steal;
#X text 282 262 extra;
#N canvas 361 237 521 308 retrigger 0;
#X text 107 69 - retrig <0>:;
#X text 107 95 - retrig <1>:;
#X text 191 95 retrigger on the same voice allocation, f 43;
#X text 107 110 - retrig <2>:;
#X text 191 110 retrigger on a new voice allocation, f 43;
#X text 191 69 (default) don't retrigger and send repeated notes ons
to "extra" outlet, f 43;
#X text 23 23 [voices] has 3 different retrigger modes \, which are
ways of handling repeated note on messages. In this context \, a repeated
note on is a note that hasn't had a note off message to free its voice
allocation. The modes are:, f 77;
#N canvas 266 23 563 448 retrig_0 0;
#X obj 193 346 else/display;
#X obj 248 346 else/display;
#X obj 304 346 else/display;
#X obj 193 117 keyboard 17 80 1 4 0;
#X obj 328 176 tgl 17 0 empty empty empty 17 7 0 10 -228856 -1 -1 2
2;
#X text 353 175 sustain;
#X obj 193 240 pack float float;
#X obj 193 210 else/suspedal -retrig 3;
#X obj 328 149 loadbang;
#X obj 193 273 else/display;
#X text 186 378 voice 1;
#X text 240 378 voice 2;
#X text 302 379 extra;
#X obj 193 316 else/voices 2, f 19;
#X text 35 32 The first example below is the default behaviour (retrig
0). For that \, we use [suspedal] in retrig mode 3 \, which sends note
off for all repeated note ons when the sustain is switched off. This
setting allows you to route repeated notes to a different patch. Test
with [keyboard] by pressing the same note., f 77;
#X connect 3 0 7 0;
#X connect 4 0 7 2;
#X connect 6 0 9 0;
#X connect 7 0 6 0;
#X connect 7 1 6 1;
#X connect 8 0 4 0;
#X connect 9 0 13 0;
#X connect 13 0 0 0;
#X connect 13 1 1 0;
#X connect 13 2 2 0;
#X restore 229 194 pd retrig_0;
#X text 32 149 See examples in the subpatches below:;
#N canvas 266 23 479 392 retrig_1 0;
#X obj 182 98 keyboard 17 80 1 4 0;
#X obj 317 157 tgl 17 0 empty empty empty 17 7 0 10 -228856 -1 -1 2
2;
#X text 342 156 sustain;
#X obj 182 315 else/display;
#X obj 237 315 else/display;
#X obj 293 315 else/display;
#X obj 182 285 else/voices 2, f 19;
#X obj 182 247 else/display;
#X obj 182 221 pack float float;
#X obj 317 130 loadbang;
#X msg 97 225 retrig 1;
#X obj 182 191 else/suspedal -retrig 1;
#X text 28 22 For mode "1" \, we use [suspedal] also in retrigger mode
1 \, because [voices] sends repeated note on messages to the same output
and when the sustain pedal is switched off \, a single note off message
will be sent to free this allocated voice., f 70;
#X text 180 341 voice 1;
#X text 234 341 voice 2;
#X text 296 342 extra;
#X connect 0 0 11 0;
#X connect 1 0 11 2;
#X connect 6 0 3 0;
#X connect 6 1 4 0;
#X connect 6 2 5 0;
#X connect 7 0 6 0;
#X connect 8 0 7 0;
#X connect 9 0 1 0;
#X connect 10 0 6 0;
#X connect 11 0 8 0;
#X connect 11 1 8 1;
#X restore 229 225 pd retrig_1;
#N canvas 380 41 509 397 retrig_2 0;
#X obj 174 99 keyboard 17 80 1 4 0;
#X obj 309 158 tgl 17 0 empty empty empty 17 7 0 10 -228856 -1 -1 2
2;
#X text 334 157 sustain;
#X obj 174 316 else/display;
#X obj 229 316 else/display;
#X obj 285 316 else/display;
#X obj 174 248 else/display;
#X obj 174 222 pack float float;
#X obj 309 131 loadbang;
#X text 172 342 voice 1;
#X text 226 342 voice 2;
#X text 288 343 extra;
#X msg 89 226 retrig 2;
#X obj 174 192 else/suspedal -retrig 3;
#X obj 174 286 else/voices 2 1, f 19;
#X text 20 23 For mode "2" \, we use [suspedal] also in retrigger mode
3 again. This example also uses "voice stealing". Now \, each repeated
note alternates bewteen the allocated voices. When the sustain pedal
is switched off \, note off messages for all note ons are given.,
f 70;
#X connect 0 0 13 0;
#X connect 1 0 13 2;
#X connect 6 0 14 0;
#X connect 7 0 6 0;
#X connect 8 0 1 0;
#X connect 12 0 14 0;
#X connect 13 0 7 0;
#X connect 13 1 7 1;
#X connect 14 0 3 0;
#X connect 14 1 4 0;
#X connect 14 2 5 0;
#X restore 229 256 pd retrig_2;
#X restore 468 207 pd retrigger;
#N canvas 698 101 477 404 release 0;
#X obj 99 323 else/display;
#X obj 158 323 else/display;
#X obj 99 130 keyboard 17 80 1 4 0;
#X obj 217 323 else/display;
#X obj 276 325 else/display;
#X obj 336 323 else/display;
#X text 41 23 You can set a release time to prevent a note off from
freeing a voice allocation \, and keep it allocated for that period
of time after a note off is sent., f 65;
#X text 41 65 This is useful if you want to wait for a release envelope
to finish before using that voice allocation for a new note., f 65
;
#X obj 99 296 else/voices 4 -rel 1000, f 40;
#X obj 246 155 tgl 17 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1000;
#X obj 246 183 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X msg 246 205 rel \$1;
#X connect 2 0 8 0;
#X connect 8 0 0 0;
#X connect 8 1 1 0;
#X connect 8 2 3 0;
#X connect 8 3 4 0;
#X connect 8 4 5 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 8 0;
#X restore 480 228 pd release;
#N canvas 590 63 627 508 list 0;
#X obj 142 319 else/display;
#X msg 99 202 60 \$1;
#X obj 99 170 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X obj 142 244 else/display;
#X obj 142 170 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X obj 186 170 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X obj 232 170 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
127;
#X msg 142 202 61 \$1;
#X msg 186 202 62 \$1;
#X msg 232 202 63 \$1;
#X obj 353 316 else/display;
#X obj 524 216 tgl 17 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X obj 353 144 keyboard 17 80 1 3 0;
#X obj 353 245 else/suspedal -retrig 3, f 29;
#X text 353 345 voices;
#X obj 548 315 else/display;
#X text 546 345 extra;
#X obj 142 291 else/voices 4 -list;
#X obj 353 289 else/voices 4 1 -retrig 2 -list 1;
#X msg 51 250 offset \$1;
#X obj 51 227 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 62 72 The -list flag takes an optional float argument that
sets the voice index offset \, which is 0 by default. You can also
set a different index offset with the "offset" message (this is only
possible in the context of "list mode")., f 72;
#N canvas 719 64 505 333 clone_example 0;
#X obj 54 252 else/out~;
#X obj 40 77 keyboard 17 80 2 4 0;
#X text 211 175 In this subpatch we have [voices] feeding [clone] \,
which loads 4 instances of a patch named "voice.pd"., f 43;
#X text 211 267 check clone's help file and lick on in to open the
patch., f 43;
#N canvas 470 55 378 320 random 0;
#X obj 86 246 pack f f;
#X obj 86 283 outlet;
#X obj 50 19 inlet;
#X obj 50 44 expr random(60 \, 72) \; random(90 \, 127) \; random(750
\, 1250);
#X obj 86 221 makenote;
#X obj 183 116 expr $f1 + random(2 \, 5);
#X obj 199 140 expr $f1 + random(2 \, 5);
#X obj 217 164 expr $f1 + random(2 \, 5);
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 5 0;
#X connect 3 1 4 1;
#X connect 3 2 4 2;
#X connect 4 0 0 0;
#X connect 4 1 0 1;
#X connect 5 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 0 4 0;
#X connect 7 0 4 0;
#X restore 40 49 pd random chords;
#X obj 40 19 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 211 215 According to the voice index (the first element in
the list sent by [voices]) \, the MIDI note messages are routed to
different instances of "voice.pd"., f 43;
#X obj 40 182 else/voices 4 1 -list;
#X obj 40 211 clone 4 voice 4;
#X connect 1 0 7 0;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 7 0 8 0;
#X connect 8 0 0 0;
#X connect 8 1 0 1;
#X restore 364 428 pd clone_example;
#X msg 206 265 voices \$1;
#X msg 206 239 2;
#X msg 246 239 4;
#X text 62 18 You can set [voices] to operate in "list mode" with the
-list flag. This mode makes it more like [poly] \, where it outputs
a list with voice index \, pitch and velocity. You can also change
the number of voices in this mode \, which causes the object to flush
and clear its memory., f 72;
#X obj 253 317 else/display;
#X text 84 407 This mode is particularly useful for using with [clone]
to implement polyphonic synths \, check the subpatch ==========================>
, f 46;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 17 0;
#X connect 4 0 7 0;
#X connect 5 0 8 0;
#X connect 6 0 9 0;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 11 0 13 2;
#X connect 12 0 13 0;
#X connect 13 0 18 0;
#X connect 13 1 18 1;
#X connect 17 0 0 0;
#X connect 17 1 27 0;
#X connect 18 0 10 0;
#X connect 18 1 15 0;
#X connect 19 0 17 0;
#X connect 20 0 19 0;
#X connect 23 0 17 0;
#X connect 24 0 23 0;
#X connect 25 0 23 0;
#X restore 497 250 pd list;
#X text 174 528 -retrig: sets to retrigger mode <0 \, 1 or 2> (default
0);
#X obj 119 156 notein;
#X obj 119 180 pack;
#X text 143 513 -rel <float>: sets release time in ms (default 0);
#X text 143 321 rel <float> - sets a release time in ms, f 63;
#X text 125 391 voices <float> - sets number of voices (in list mode
only), f 66;
#X connect 30 0 46 0;
#X connect 31 0 30 0;
#X connect 32 0 34 0;
#X connect 33 0 35 0;
#X connect 34 0 46 0;
#X connect 35 0 46 0;
#X connect 36 0 37 0;
#X connect 37 0 46 0;
#X connect 44 0 45 0;
#X connect 45 0 46 0;
#X connect 46 0 27 0;
#X connect 46 1 28 0;
#X connect 46 2 29 0;
#X connect 55 0 56 0;
#X connect 55 1 56 1;
#X connect 56 0 46 0;
