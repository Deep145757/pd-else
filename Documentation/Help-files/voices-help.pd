#N canvas 531 23 560 653 10;
#X obj 2 3 cnv 15 301 42 empty empty voices 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 305 3 graph;
#X obj 22 39 cnv 4 4 4 empty empty Polyphonic 0 28 2 18 #e0e0e0 #000000 0;
#X obj 110 39 cnv 4 4 4 empty empty voice 0 28 2 18 #e0e0e0 #000000 0;
#X obj 155 39 cnv 4 4 4 empty empty allocator 0 28 2 18 #e0e0e0 #000000 0;
#X obj 4 625 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 6 327 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 490 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 522 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 102 498 cnv 17 3 17 empty empty n 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 103 335 cnv 17 3 110 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 564 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 103 449 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 185 333 list - MIDI note messages (note and velocity pair), f 56;
#X text 125 389 retrig <float> - non zero sets to retrigger mode., f 66;
#X text 179 403 clear - clears memory without output, f 57;
#X text 179 417 flush - clears memory and output hanging notes, f 57;
#X text 125 375 offset <float> - sets index offset (in the context of "list" mode), f 66;
#X text 185 498 list - note messages, f 57;
#X text 179 347 float - note pitch values, f 57;
#X text 179 449 float - note velocity values, f 57;
#X text 161 529 1) float - sets number of voices (default 1);
#X text 161 544 2) float - non zero sets voice stealing (default 0);
#X text 143 571 -rel <float>: sets release time in ms (default 0);
#X text 143 361 rel <float> - sets a release time in ms, f 63;
#X text 125 431 voices <float> - sets number of voices (in list mode only), f 66;
#X text 46 263 see also:;
#X obj 103 470 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 179 470 float - release time in ms, f 57;
#X text 124 586 -retrig <float>: sets to retrigger mode <0 \, 1 or 2> (default 0), f 63;
#X text 180 604 -split: sets to split mode, f 49;
#X text 43 88 [voices] is used to implement voice allocation in polyphonic synths. It's kinda like Pd Vanilla's [poly] object \, but with more functionalities. By default \, it outputs the voice information as a list with voice index \, pitch and velocity (similar to [poly] which outputs an unpacked list) \, but it can also route the voices to different outlets in "split" mode., f 75;
#X obj 185 271 else/display;
#X obj 266 271 else/display;
#X obj 185 241 else/voices 2, f 14;
#X obj 123 184 notein;
#X obj 123 208 pack;
#X obj 185 169 else/keyboard 22 60 1 4 1 0 empty empty;
#X text 181 299 voices;
#X text 262 300 extra voices;
#X text 281 239 <-- 1st argument is the number of voices, f 20;
#N canvas 451 76 792 450 example 0;
#X obj 160 309 else/display;
#X msg 117 192 60 \$1;
#X obj 117 160 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 160 234 else/display;
#X obj 160 160 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 204 160 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X obj 250 160 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 160 192 61 \$1;
#X msg 204 192 62 \$1;
#X msg 250 192 63 \$1;
#X msg 69 240 offset \$1;
#X obj 69 217 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 224 255 voices \$1;
#X msg 224 229 2;
#X msg 264 229 4;
#X obj 235 307 else/display;
#X obj 160 281 else/voices 4;
#X obj 349 175 else/keyboard 17 80 2 4 0 0 empty empty;
#X text 470 276 In this subpatch we have [voices] feeding [clone] \, which loads 4 instances of a patch named "voice.pd"., f 43;
#N canvas 470 55 378 320 random 0;
#X obj 86 246 pack f f;
#X obj 86 283 outlet;
#X obj 50 19 inlet;
#X obj 50 44 expr random(60 \, 72) \; random(90 \, 127) \; random(750 \, 1250);
#X obj 86 221 makenote;
#X obj 183 116 expr $f1 + random(2 \, 5);
#X obj 199 140 expr $f1 + random(2 \, 5);
#X obj 217 164 expr $f1 + random(2 \, 5);
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 5 0;
#X connect 3 1 4 1;
#X connect 3 2 4 2;
#X connect 4 0 0 0;
#X connect 4 1 0 1;
#X connect 5 0 6 0;
#X connect 5 0 4 0;
#X connect 6 0 7 0;
#X connect 6 0 4 0;
#X connect 7 0 4 0;
#X restore 349 147 pd random chords;
#X obj 349 117 bng 18 250 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000;
#X text 470 316 According to the voice index (the first element in the list sent by [voices]) \, the MIDI note messages are routed to different instances of "voice.pd"., f 43;
#X obj 349 309 clone 4 voice 4;
#X obj 350 346 else/out~;
#X obj 349 280 else/voices 4 1;
#X text 59 30 [voices] outputs a list with voice index \, pitch and velocity. You can also change the number of voices in this mode \, which causes the object to flush and clear its memory. The index offset is 0 by default and you can set a different one with the "offset" message., f 54;
#X text 410 43 This default mode is particularly useful for using with [clone] to implement polyphonic synths \, as below., f 44;
#X text 470 368 check clone's help file and click on in to open the patch., f 43;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 16 0;
#X connect 4 0 7 0;
#X connect 5 0 8 0;
#X connect 6 0 9 0;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 10 0 16 0;
#X connect 11 0 10 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 12 0;
#X connect 16 0 0 0;
#X connect 16 1 15 0;
#X connect 17 0 24 0;
#X connect 19 0 17 0;
#X connect 20 0 19 0;
#X connect 22 0 23 0;
#X connect 22 1 23 1;
#X connect 24 0 22 0;
#X restore 476 202 pd example;
#N canvas 779 126 443 445 split 0;
#X obj 151 282 else/display;
#X obj 209 282 else/display;
#X obj 268 281 else/display;
#X obj 151 256 else/voices 2, f 20;
#X text 150 311 voice 1;
#X text 211 311 voice 2;
#X obj 69 187 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 69 212 steal \$1;
#X text 39 19 In regular mode \, [voices] allocates the given number of voices and extra voices are sent to its rightmost outlet. After a voice is allocated \, the object needs to receive a corresponding note-off message so that voice can be used again.;
#X text 39 84 But you can set the object to "voice stealing" mode with the second argument or the "steal" message. This mode forces a note off message on the first allocated voice so the extra incoming voice "steals" it.;
#X text 269 311 extra;
#X text 44 340 The rightmost outlet can still send messages when in "voice stealing" mode. This happens when a voice has been stolen but you haven't sent the object a note off message. Then \, when you eventually send a note off message \, the object won't find a corresponding note on message and will output that message as an "extra".;
#X obj 151 160 else/keyboard 25 80 1 4 1 0 empty empty;
#X connect 3 0 0 0;
#X connect 3 1 1 0;
#X connect 6 0 7 0;
#X connect 7 0 3 0;
#X connect 12 0 3 0;
#X restore 488 224 pd split;
#N canvas 779 126 443 445 steal 0;
#X obj 151 282 else/display;
#X obj 209 282 else/display;
#X obj 268 281 else/display;
#X obj 151 256 else/voices 2, f 20;
#X text 150 311 voice 1;
#X text 211 311 voice 2;
#X obj 69 187 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 127;
#X msg 69 212 steal \$1;
#X text 39 19 In regular mode \, [voices] allocates the given number of voices and extra voices are sent to its rightmost outlet. After a voice is allocated \, the object needs to receive a corresponding note-off message so that voice can be used again.;
#X text 39 84 But you can set the object to "voice stealing" mode with the second argument or the "steal" message. This mode forces a note off message on the first allocated voice so the extra incoming voice "steals" it.;
#X text 269 311 extra;
#X text 44 340 The rightmost outlet can still send messages when in "voice stealing" mode. This happens when a voice has been stolen but you haven't sent the object a note off message. Then \, when you eventually send a note off message \, the object won't find a corresponding note on message and will output that message as an "extra".;
#X obj 151 160 else/keyboard 25 80 1 4 1 0 empty empty;
#X connect 3 0 0 0;
#X connect 3 1 1 0;
#X connect 6 0 7 0;
#X connect 7 0 3 0;
#X connect 12 0 3 0;
#X restore 489 246 pd steal;
#N canvas 667 236 595 459 retrigger 0;
#X text 107 69 - retrig <0>:;
#X text 107 95 - retrig <1>:;
#X text 191 95 retrigger on the same voice allocation, f 43;
#X text 107 110 - retrig <2>:;
#X text 191 110 retrigger on a new voice allocation, f 43;
#X text 191 69 (default) don't retrigger and send repeated notes ons to "extra" outlet, f 43;
#X text 23 23 [voices] has 3 different retrigger modes \, which are ways of handling repeated note on messages. In this context \, a repeated note on is a note that hasn't had a note off message to free its voice allocation. The modes are:, f 77;
#N canvas 767 131 463 458 retrig_0 0;
#X obj 130 353 else/display;
#X obj 185 353 else/display;
#X obj 241 353 else/display;
#X obj 130 124 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 265 183 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 290 182 sustain;
#X obj 130 247 pack float float;
#X obj 130 217 else/suspedal -retrig 3;
#X obj 265 156 loadbang;
#X obj 130 280 else/display;
#X text 123 385 voice 1;
#X text 177 385 voice 2;
#X text 239 386 extra;
#X obj 130 323 else/voices 2, f 19;
#X text 39 32 The first example below is the default behaviour (retrig 0). For that \, we use [suspedal] in retrig mode 3 \, which sends note off for all repeated note ons when the sustain is switched off. This setting allows you to route repeated notes to a different patch. Test with [keyboard] by pressing the same note., f 63;
#X connect 3 0 7 0;
#X connect 4 0 7 2;
#X connect 6 0 9 0;
#X connect 7 0 6 0;
#X connect 7 1 6 1;
#X connect 8 0 4 0;
#X connect 9 0 13 0;
#X connect 13 0 0 0;
#X connect 13 1 1 0;
#X restore 229 194 pd retrig_0;
#X text 32 149 See examples in the subpatches below:;
#N canvas 616 116 479 392 retrig_1 0;
#X obj 147 98 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 282 157 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 307 156 sustain;
#X obj 147 315 else/display;
#X obj 214 315 else/display;
#X obj 282 315 else/display;
#X obj 147 247 else/display;
#X obj 147 221 pack float float;
#X obj 282 130 loadbang;
#X obj 147 191 else/suspedal -retrig 1;
#X text 28 22 For mode "1" \, we use [suspedal] also in retrigger mode 1 \, because [voices] sends repeated note on messages to the same output and when the sustain pedal is switched off \, a single note off message will be sent to free this allocated voice., f 70;
#X text 145 341 voice 1;
#X text 211 341 voice 2;
#X text 285 342 extra;
#X obj 147 285 else/voices -retrig 1 2;
#X connect 0 0 9 0;
#X connect 1 0 9 2;
#X connect 6 0 14 0;
#X connect 7 0 6 0;
#X connect 8 0 1 0;
#X connect 9 0 7 0;
#X connect 9 1 7 1;
#X connect 14 0 3 0;
#X connect 14 1 4 0;
#X restore 229 225 pd retrig_1;
#N canvas 755 189 509 397 retrig_2 0;
#X obj 174 99 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 309 158 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 2;
#X text 334 157 sustain;
#X obj 174 316 else/display;
#X obj 247 316 else/display;
#X obj 321 316 else/display;
#X obj 174 248 else/display;
#X obj 174 222 pack float float;
#X obj 309 131 loadbang;
#X text 172 342 voice 1;
#X text 244 342 voice 2;
#X text 324 343 extra;
#X obj 174 192 else/suspedal -retrig 3;
#X text 20 23 For mode "2" \, we use [suspedal] in retrigger mode 3 This example also uses "voice stealing". Now \, each repeated note alternates between the allocated voices. When the sustain pedal is switched off \, note off messages for all note ons are given., f 70;
#X obj 174 286 else/voices -retrig 2 2 1;
#X connect 0 0 12 0;
#X connect 1 0 12 2;
#X connect 6 0 14 0;
#X connect 7 0 6 0;
#X connect 8 0 1 0;
#X connect 12 0 7 0;
#X connect 12 1 7 1;
#X connect 14 0 3 0;
#X connect 14 1 4 0;
#X restore 229 256 pd retrig_2;
#X obj 335 371 else/display;
#X obj 470 271 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 335 199 else/keyboard 17 80 1 3 0 0 empty empty;
#X obj 335 300 else/suspedal -retrig 3;
#X text 326 396 voices;
#X obj 494 371 else/display;
#X text 485 396 extra;
#X obj 335 344 else/voices -retrig 2 1 4 1;
#X connect 12 0 14 2;
#X connect 13 0 14 0;
#X connect 14 0 18 0;
#X connect 14 1 18 1;
#X connect 18 0 11 0;
#X connect 18 1 16 0;
#X restore 465 267 pd retrigger;
#N canvas 886 147 480 352 release 0;
#X obj 92 273 else/display;
#X obj 151 273 else/display;
#X obj 92 130 else/keyboard 17 80 1 4 0 0 empty empty;
#X obj 210 273 else/display;
#X obj 269 273 else/display;
#X obj 329 273 else/display;
#X obj 258 160 tgl 17 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1000;
#X obj 258 188 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 258 210 rel \$1;
#X obj 329 206 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 41 23 You can set a release time to prevent a note off from freeing a voice allocation (and keep it allocated for that period of time after a note off is sent)., f 65;
#X text 41 65 This is useful if you want to wait for a release envelope to finish before using that voice allocation for a new note. Set the release time in ms with the '-rel' flag \, 'rel' message or right inlet., f 65;
#X obj 92 246 else/voices -rel 1000 4, f 40;
#X connect 2 0 12 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 12 0;
#X connect 9 0 12 2;
#X connect 12 0 0 0;
#X connect 12 1 1 0;
#X restore 477 288 pd release;
#X obj 47 286 else/mono;
#X connect 42 0 40 0;
#X connect 42 1 41 0;
#X connect 43 0 44 0;
#X connect 43 1 44 1;
#X connect 44 0 42 0;
#X connect 45 0 42 0;
